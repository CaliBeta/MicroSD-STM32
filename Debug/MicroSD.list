
MicroSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007644  08007644  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007644  08007644  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007644  08007644  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800764c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  20000088  080076d4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  080076d4  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5b2  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221d  00000000  00000000  0002b663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002e470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001869b  00000000  00000000  0002ef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edc3  00000000  00000000  00047603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085827  00000000  00000000  000563c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbbed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  000dbc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08006f14 	.word	0x08006f14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08006f14 	.word	0x08006f14

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2uiz>:
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	d211      	bcs.n	8000750 <__aeabi_d2uiz+0x28>
 800072c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000730:	d211      	bcs.n	8000756 <__aeabi_d2uiz+0x2e>
 8000732:	d50d      	bpl.n	8000750 <__aeabi_d2uiz+0x28>
 8000734:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800073c:	d40e      	bmi.n	800075c <__aeabi_d2uiz+0x34>
 800073e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074a:	fa23 f002 	lsr.w	r0, r3, r2
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075a:	d102      	bne.n	8000762 <__aeabi_d2uiz+0x3a>
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr

08000768 <SD_disk_initialize>:
/* Exported functions --------------------------------------------------------*/
/*--------------------------------------------------------------------------
 user_diskio.c functions
 ---------------------------------------------------------------------------*/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) {
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if (drv) return STA_NOINIT;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SD_disk_initialize+0x14>
 8000778:	2301      	movs	r3, #1
 800077a:	e0d5      	b.n	8000928 <SD_disk_initialize+0x1c0>

	/* no disk */
	if (Stat & STA_NODISK) return Stat;
 800077c:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <SD_disk_initialize+0x1c8>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <SD_disk_initialize+0x2a>
 800078a:	4b69      	ldr	r3, [pc, #420]	; (8000930 <SD_disk_initialize+0x1c8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	e0ca      	b.n	8000928 <SD_disk_initialize+0x1c0>

	/* power on */
	SD_PowerOn();
 8000792:	f000 fb7f 	bl	8000e94 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000796:	f000 fb05 	bl	8000da4 <SELECT>

	/* check disk type */
	type = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1) {
 800079e:	2100      	movs	r1, #0
 80007a0:	2040      	movs	r0, #64	; 0x40
 80007a2:	f000 fc65 	bl	8001070 <SD_SendCmd>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	f040 80a5 	bne.w	80008f8 <SD_disk_initialize+0x190>
		/* timeout 1 sec */
		Timer1 = 100;
 80007ae:	4b61      	ldr	r3, [pc, #388]	; (8000934 <SD_disk_initialize+0x1cc>)
 80007b0:	2264      	movs	r2, #100	; 0x64
 80007b2:	701a      	strb	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1) {
 80007b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80007b8:	2048      	movs	r0, #72	; 0x48
 80007ba:	f000 fc59 	bl	8001070 <SD_SendCmd>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d158      	bne.n	8000876 <SD_disk_initialize+0x10e>
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	e00c      	b.n	80007e4 <SD_disk_initialize+0x7c>
				ocr[n] = SPI_RxByte();
 80007ca:	7bfc      	ldrb	r4, [r7, #15]
 80007cc:	f000 fb1a 	bl	8000e04 <SPI_RxByte>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	f104 0310 	add.w	r3, r4, #16
 80007d8:	443b      	add	r3, r7
 80007da:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	3301      	adds	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d9ef      	bls.n	80007ca <SD_disk_initialize+0x62>

			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
 80007ea:	7abb      	ldrb	r3, [r7, #10]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	f040 8083 	bne.w	80008f8 <SD_disk_initialize+0x190>
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	2baa      	cmp	r3, #170	; 0xaa
 80007f6:	d17f      	bne.n	80008f8 <SD_disk_initialize+0x190>
				/* voltage range 2.7-3.6V */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80007f8:	2100      	movs	r1, #0
 80007fa:	2077      	movs	r0, #119	; 0x77
 80007fc:	f000 fc38 	bl	8001070 <SD_SendCmd>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d807      	bhi.n	8000816 <SD_disk_initialize+0xae>
 8000806:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800080a:	2069      	movs	r0, #105	; 0x69
 800080c:	f000 fc30 	bl	8001070 <SD_SendCmd>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d005      	beq.n	8000822 <SD_disk_initialize+0xba>
					  break; /* ACMD41 with HCS bit */
				}
				while (Timer1);
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <SD_disk_initialize+0x1cc>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1eb      	bne.n	80007f8 <SD_disk_initialize+0x90>
 8000820:	e000      	b.n	8000824 <SD_disk_initialize+0xbc>
					  break; /* ACMD41 with HCS bit */
 8000822:	bf00      	nop

				if (Timer1 && SD_SendCmd(CMD58, 0) == 0) {
 8000824:	4b43      	ldr	r3, [pc, #268]	; (8000934 <SD_disk_initialize+0x1cc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d064      	beq.n	80008f8 <SD_disk_initialize+0x190>
 800082e:	2100      	movs	r1, #0
 8000830:	207a      	movs	r0, #122	; 0x7a
 8000832:	f000 fc1d 	bl	8001070 <SD_SendCmd>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d15d      	bne.n	80008f8 <SD_disk_initialize+0x190>
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	e00c      	b.n	800085c <SD_disk_initialize+0xf4>
						ocr[n] = SPI_RxByte();
 8000842:	7bfc      	ldrb	r4, [r7, #15]
 8000844:	f000 fade 	bl	8000e04 <SPI_RxByte>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	f104 0310 	add.w	r3, r4, #16
 8000850:	443b      	add	r3, r7
 8000852:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	3301      	adds	r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d9ef      	bls.n	8000842 <SD_disk_initialize+0xda>
					type = (ocr[0] & 0x40) ? 6 : 2;
 8000862:	7a3b      	ldrb	r3, [r7, #8]
 8000864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SD_disk_initialize+0x108>
 800086c:	2306      	movs	r3, #6
 800086e:	e000      	b.n	8000872 <SD_disk_initialize+0x10a>
 8000870:	2302      	movs	r3, #2
 8000872:	73bb      	strb	r3, [r7, #14]
 8000874:	e040      	b.n	80008f8 <SD_disk_initialize+0x190>
				}
			}
		}
		else {
			/* SDC Ver1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000876:	2100      	movs	r1, #0
 8000878:	2077      	movs	r0, #119	; 0x77
 800087a:	f000 fbf9 	bl	8001070 <SD_SendCmd>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d808      	bhi.n	8000896 <SD_disk_initialize+0x12e>
 8000884:	2100      	movs	r1, #0
 8000886:	2069      	movs	r0, #105	; 0x69
 8000888:	f000 fbf2 	bl	8001070 <SD_SendCmd>
 800088c:	4603      	mov	r3, r0
 800088e:	2b01      	cmp	r3, #1
 8000890:	d801      	bhi.n	8000896 <SD_disk_initialize+0x12e>
 8000892:	2302      	movs	r3, #2
 8000894:	e000      	b.n	8000898 <SD_disk_initialize+0x130>
 8000896:	2301      	movs	r3, #1
 8000898:	73bb      	strb	r3, [r7, #14]

			do {
				if (type == 2) {
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d10e      	bne.n	80008be <SD_disk_initialize+0x156>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80008a0:	2100      	movs	r1, #0
 80008a2:	2077      	movs	r0, #119	; 0x77
 80008a4:	f000 fbe4 	bl	8001070 <SD_SendCmd>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d80e      	bhi.n	80008cc <SD_disk_initialize+0x164>
 80008ae:	2100      	movs	r1, #0
 80008b0:	2069      	movs	r0, #105	; 0x69
 80008b2:	f000 fbdd 	bl	8001070 <SD_SendCmd>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d107      	bne.n	80008cc <SD_disk_initialize+0x164>
 80008bc:	e00d      	b.n	80008da <SD_disk_initialize+0x172>
				}
				else {
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80008be:	2100      	movs	r1, #0
 80008c0:	2041      	movs	r0, #65	; 0x41
 80008c2:	f000 fbd5 	bl	8001070 <SD_SendCmd>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d005      	beq.n	80008d8 <SD_disk_initialize+0x170>
				}
			}
			while (Timer1);
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <SD_disk_initialize+0x1cc>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1e1      	bne.n	800089a <SD_disk_initialize+0x132>
 80008d6:	e000      	b.n	80008da <SD_disk_initialize+0x172>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80008d8:	bf00      	nop
			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <SD_disk_initialize+0x1cc>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d007      	beq.n	80008f4 <SD_disk_initialize+0x18c>
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	2050      	movs	r0, #80	; 0x50
 80008ea:	f000 fbc1 	bl	8001070 <SD_SendCmd>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SD_disk_initialize+0x190>
 80008f4:	2300      	movs	r3, #0
 80008f6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <SD_disk_initialize+0x1d0>)
 80008fa:	7bbb      	ldrb	r3, [r7, #14]
 80008fc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80008fe:	f000 fa5d 	bl	8000dbc <DESELECT>
	SPI_RxByte();
 8000902:	f000 fa7f 	bl	8000e04 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <SD_disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <SD_disk_initialize+0x1c8>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f023 0301 	bic.w	r3, r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SD_disk_initialize+0x1c8>)
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e001      	b.n	8000922 <SD_disk_initialize+0x1ba>
	else
		SD_PowerOff(); /* Initialization failed */
 800091e:	f000 fb05 	bl	8000f2c <SD_PowerOff>

	return Stat;
 8000922:	4b03      	ldr	r3, [pc, #12]	; (8000930 <SD_disk_initialize+0x1c8>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
}
 8000928:	4618      	mov	r0, r3
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	20000000 	.word	0x20000000
 8000934:	2000042e 	.word	0x2000042e
 8000938:	200000a4 	.word	0x200000a4

0800093c <SD_disk_status>:
//-------------------------------------------------------------

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SD_disk_status+0x14>
 800094c:	2301      	movs	r3, #1
 800094e:	e002      	b.n	8000956 <SD_disk_status+0x1a>

	return Stat;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <SD_disk_status+0x24>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000000 	.word	0x20000000

08000964 <SD_disk_read>:
//-------------------------------------------------------------

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d102      	bne.n	8000980 <SD_disk_read+0x1c>
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d101      	bne.n	8000984 <SD_disk_read+0x20>
 8000980:	2304      	movs	r3, #4
 8000982:	e051      	b.n	8000a28 <SD_disk_read+0xc4>
	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000984:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <SD_disk_read+0xcc>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SD_disk_read+0x32>
 8000992:	2303      	movs	r3, #3
 8000994:	e048      	b.n	8000a28 <SD_disk_read+0xc4>
	/* convert to byte address */
	if (!(CardType & 4)) sector *= 512;
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <SD_disk_read+0xd0>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <SD_disk_read+0x44>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	607b      	str	r3, [r7, #4]

	SELECT();
 80009a8:	f000 f9fc 	bl	8000da4 <SELECT>

	if (count == 1) {
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d111      	bne.n	80009d6 <SD_disk_read+0x72>
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count =
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	2051      	movs	r0, #81	; 0x51
 80009b6:	f000 fb5b 	bl	8001070 <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d129      	bne.n	8000a14 <SD_disk_read+0xb0>
 80009c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c4:	68b8      	ldr	r0, [r7, #8]
 80009c6:	f000 fac7 	bl	8000f58 <SD_RxDataBlock>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d021      	beq.n	8000a14 <SD_disk_read+0xb0>
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	e01e      	b.n	8000a14 <SD_disk_read+0xb0>
		    0;
	}
	else {
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0) {
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	2052      	movs	r0, #82	; 0x52
 80009da:	f000 fb49 	bl	8001070 <SD_SendCmd>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d117      	bne.n	8000a14 <SD_disk_read+0xb0>
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	68b8      	ldr	r0, [r7, #8]
 80009ea:	f000 fab5 	bl	8000f58 <SD_RxDataBlock>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00a      	beq.n	8000a0a <SD_disk_read+0xa6>

				buff += 512;
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80009fa:	60bb      	str	r3, [r7, #8]
			}
			while (--count);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1ed      	bne.n	80009e4 <SD_disk_read+0x80>
 8000a08:	e000      	b.n	8000a0c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a0a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	204c      	movs	r0, #76	; 0x4c
 8000a10:	f000 fb2e 	bl	8001070 <SD_SendCmd>
		}
	}
	/* Idle */
	DESELECT();
 8000a14:	f000 f9d2 	bl	8000dbc <DESELECT>
	SPI_RxByte();
 8000a18:	f000 f9f4 	bl	8000e04 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	200000a4 	.word	0x200000a4

08000a38 <SD_disk_write>:
//-------------------------------------------------------------

/* write sector */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <SD_disk_write+0x1c>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d101      	bne.n	8000a58 <SD_disk_write+0x20>
 8000a54:	2304      	movs	r3, #4
 8000a56:	e06b      	b.n	8000b30 <SD_disk_write+0xf8>
	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a58:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <SD_disk_write+0x100>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SD_disk_write+0x32>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e062      	b.n	8000b30 <SD_disk_write+0xf8>
	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <SD_disk_write+0x100>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SD_disk_write+0x44>
 8000a78:	2302      	movs	r3, #2
 8000a7a:	e059      	b.n	8000b30 <SD_disk_write+0xf8>
	/* convert to byte address */
	if (!(CardType & 4)) sector *= 512;
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <SD_disk_write+0x104>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <SD_disk_write+0x56>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	025b      	lsls	r3, r3, #9
 8000a8c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a8e:	f000 f989 	bl	8000da4 <SELECT>

	if (count == 1) {
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d110      	bne.n	8000aba <SD_disk_write+0x82>
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE)) count =
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	2058      	movs	r0, #88	; 0x58
 8000a9c:	f000 fae8 	bl	8001070 <SD_SendCmd>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d13a      	bne.n	8000b1c <SD_disk_write+0xe4>
 8000aa6:	21fe      	movs	r1, #254	; 0xfe
 8000aa8:	68b8      	ldr	r0, [r7, #8]
 8000aaa:	f000 fa8b 	bl	8000fc4 <SD_TxDataBlock>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d033      	beq.n	8000b1c <SD_disk_write+0xe4>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	e030      	b.n	8000b1c <SD_disk_write+0xe4>
		    0;
	}
	else {
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & 2) {
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <SD_disk_write+0x104>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <SD_disk_write+0x9e>
			SD_SendCmd(CMD55, 0);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2077      	movs	r0, #119	; 0x77
 8000aca:	f000 fad1 	bl	8001070 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000ace:	6839      	ldr	r1, [r7, #0]
 8000ad0:	2057      	movs	r0, #87	; 0x57
 8000ad2:	f000 facd 	bl	8001070 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0) {
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2059      	movs	r0, #89	; 0x59
 8000ada:	f000 fac9 	bl	8001070 <SD_SendCmd>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d11b      	bne.n	8000b1c <SD_disk_write+0xe4>
			do {
				if (!SD_TxDataBlock(buff, 0xFC)) break;
 8000ae4:	21fc      	movs	r1, #252	; 0xfc
 8000ae6:	68b8      	ldr	r0, [r7, #8]
 8000ae8:	f000 fa6c 	bl	8000fc4 <SD_TxDataBlock>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00a      	beq.n	8000b08 <SD_disk_write+0xd0>

				buff += 512;
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000af8:	60bb      	str	r3, [r7, #8]
			}
			while (--count);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1ee      	bne.n	8000ae4 <SD_disk_write+0xac>
 8000b06:	e000      	b.n	8000b0a <SD_disk_write+0xd2>
				if (!SD_TxDataBlock(buff, 0xFC)) break;
 8000b08:	bf00      	nop
			/* STOP_TRAN token */
			if (!SD_TxDataBlock(0, 0xFD)) count = 1;
 8000b0a:	21fd      	movs	r1, #253	; 0xfd
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 fa59 	bl	8000fc4 <SD_TxDataBlock>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <SD_disk_write+0xe4>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
		}
	}
	/* Idle */
	DESELECT();
 8000b1c:	f000 f94e 	bl	8000dbc <DESELECT>
	SPI_RxByte();
 8000b20:	f000 f970 	bl	8000e04 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf14      	ite	ne
 8000b2a:	2301      	movne	r3, #1
 8000b2c:	2300      	moveq	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	200000a4 	.word	0x200000a4

08000b40 <SD_disk_ioctl>:
//-------------------------------------------------------------
#endif /* _READONLY */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b08b      	sub	sp, #44	; 0x2c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	603a      	str	r2, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	623b      	str	r3, [r7, #32]
	WORD csize;
	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SD_disk_ioctl+0x1e>
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	e11b      	b.n	8000d96 <SD_disk_ioctl+0x256>

	res = RES_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER) {
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d129      	bne.n	8000bbe <SD_disk_ioctl+0x7e>
		switch (*ptr) {
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d017      	beq.n	8000ba2 <SD_disk_ioctl+0x62>
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	dc1f      	bgt.n	8000bb6 <SD_disk_ioctl+0x76>
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <SD_disk_ioctl+0x40>
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d00b      	beq.n	8000b96 <SD_disk_ioctl+0x56>
 8000b7e:	e01a      	b.n	8000bb6 <SD_disk_ioctl+0x76>
			case 0:
				if (SD_CheckPower()) SD_PowerOff(); /* Power Off */
 8000b80:	f000 f9e0 	bl	8000f44 <SD_CheckPower>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SD_disk_ioctl+0x4e>
 8000b8a:	f000 f9cf 	bl	8000f2c <SD_PowerOff>
				res = RES_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000b94:	e0fd      	b.n	8000d92 <SD_disk_ioctl+0x252>
			case 1:
				SD_PowerOn(); /* Power On */
 8000b96:	f000 f97d 	bl	8000e94 <SD_PowerOn>
				res = RES_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000ba0:	e0f7      	b.n	8000d92 <SD_disk_ioctl+0x252>
			case 2:
				*(ptr + 1) = (BYTE) SD_CheckPower();
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	1c5c      	adds	r4, r3, #1
 8000ba6:	f000 f9cd 	bl	8000f44 <SD_CheckPower>
 8000baa:	4603      	mov	r3, r0
 8000bac:	7023      	strb	r3, [r4, #0]
				res = RES_OK; /* Power Check */
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000bb4:	e0ed      	b.n	8000d92 <SD_disk_ioctl+0x252>
			default:
				res = RES_PARERR;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bbc:	e0e9      	b.n	8000d92 <SD_disk_ioctl+0x252>
		}
	}
	else {
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bbe:	4b78      	ldr	r3, [pc, #480]	; (8000da0 <SD_disk_ioctl+0x260>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SD_disk_ioctl+0x90>
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e0e2      	b.n	8000d96 <SD_disk_ioctl+0x256>

		SELECT();
 8000bd0:	f000 f8e8 	bl	8000da4 <SELECT>

		switch (ctrl) {
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	2b0d      	cmp	r3, #13
 8000bd8:	f200 80cc 	bhi.w	8000d74 <SD_disk_ioctl+0x234>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <SD_disk_ioctl+0xa4>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000cdf 	.word	0x08000cdf
 8000be8:	08000c1d 	.word	0x08000c1d
 8000bec:	08000ccf 	.word	0x08000ccf
 8000bf0:	08000d75 	.word	0x08000d75
 8000bf4:	08000d75 	.word	0x08000d75
 8000bf8:	08000d75 	.word	0x08000d75
 8000bfc:	08000d75 	.word	0x08000d75
 8000c00:	08000d75 	.word	0x08000d75
 8000c04:	08000d75 	.word	0x08000d75
 8000c08:	08000d75 	.word	0x08000d75
 8000c0c:	08000d75 	.word	0x08000d75
 8000c10:	08000cf1 	.word	0x08000cf1
 8000c14:	08000d15 	.word	0x08000d15
 8000c18:	08000d39 	.word	0x08000d39
			case GET_SECTOR_COUNT:
				/* SEND_CSD */
				if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) {
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2049      	movs	r0, #73	; 0x49
 8000c20:	f000 fa26 	bl	8001070 <SD_SendCmd>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 80a8 	bne.w	8000d7c <SD_disk_ioctl+0x23c>
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2110      	movs	r1, #16
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f990 	bl	8000f58 <SD_RxDataBlock>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 809e 	beq.w	8000d7c <SD_disk_ioctl+0x23c>
					if ((csd[0] >> 6) == 1) {
 8000c40:	7b3b      	ldrb	r3, [r7, #12]
 8000c42:	099b      	lsrs	r3, r3, #6
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d10e      	bne.n	8000c68 <SD_disk_ioctl+0x128>
						/* SDC ver 2.00 */
						csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000c4a:	7d7b      	ldrb	r3, [r7, #21]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	7d3b      	ldrb	r3, [r7, #20]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	4413      	add	r3, r2
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	83fb      	strh	r3, [r7, #30]
						*(DWORD*) buff = (DWORD) csize << 10;
 8000c5e:	8bfb      	ldrh	r3, [r7, #30]
 8000c60:	029a      	lsls	r2, r3, #10
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e02e      	b.n	8000cc6 <SD_disk_ioctl+0x186>
					}
					else {
						/* MMC or SDC ver 1.XX */
						n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1)
 8000c68:	7c7b      	ldrb	r3, [r7, #17]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	7dbb      	ldrb	r3, [r7, #22]
 8000c72:	09db      	lsrs	r3, r3, #7
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4413      	add	r3, r2
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	7d7b      	ldrb	r3, [r7, #21]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f003 0306 	and.w	r3, r3, #6
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4413      	add	r3, r2
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						    + 2;
						csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000c90:	7d3b      	ldrb	r3, [r7, #20]
 8000c92:	099b      	lsrs	r3, r3, #6
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	7cfb      	ldrb	r3, [r7, #19]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b29a      	uxth	r2, r3
						    + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ca4:	7cbb      	ldrb	r3, [r7, #18]
 8000ca6:	029b      	lsls	r3, r3, #10
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b29b      	uxth	r3, r3
						csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	83fb      	strh	r3, [r7, #30]
						*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000cb8:	8bfa      	ldrh	r2, [r7, #30]
 8000cba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cbe:	3b09      	subs	r3, #9
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	601a      	str	r2, [r3, #0]
					}

					res = RES_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				break;
 8000ccc:	e056      	b.n	8000d7c <SD_disk_ioctl+0x23c>

			case GET_SECTOR_SIZE:
				*(WORD*) buff = 512;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd4:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000cdc:	e055      	b.n	8000d8a <SD_disk_ioctl+0x24a>

			case CTRL_SYNC:
				if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000cde:	f000 f8bd 	bl	8000e5c <SD_ReadyWait>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2bff      	cmp	r3, #255	; 0xff
 8000ce6:	d14b      	bne.n	8000d80 <SD_disk_ioctl+0x240>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000cee:	e047      	b.n	8000d80 <SD_disk_ioctl+0x240>

			case MMC_GET_CSD:
				/* SEND_CSD */
				if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2049      	movs	r0, #73	; 0x49
 8000cf4:	f000 f9bc 	bl	8001070 <SD_SendCmd>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d142      	bne.n	8000d84 <SD_disk_ioctl+0x244>
 8000cfe:	2110      	movs	r1, #16
 8000d00:	6a38      	ldr	r0, [r7, #32]
 8000d02:	f000 f929 	bl	8000f58 <SD_RxDataBlock>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d03b      	beq.n	8000d84 <SD_disk_ioctl+0x244>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000d12:	e037      	b.n	8000d84 <SD_disk_ioctl+0x244>

			case MMC_GET_CID:
				/* SEND_CID */
				if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d14:	2100      	movs	r1, #0
 8000d16:	204a      	movs	r0, #74	; 0x4a
 8000d18:	f000 f9aa 	bl	8001070 <SD_SendCmd>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d132      	bne.n	8000d88 <SD_disk_ioctl+0x248>
 8000d22:	2110      	movs	r1, #16
 8000d24:	6a38      	ldr	r0, [r7, #32]
 8000d26:	f000 f917 	bl	8000f58 <SD_RxDataBlock>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d02b      	beq.n	8000d88 <SD_disk_ioctl+0x248>
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000d36:	e027      	b.n	8000d88 <SD_disk_ioctl+0x248>

			case MMC_GET_OCR:
				/* READ_OCR */
				if (SD_SendCmd(CMD58, 0) == 0) {
 8000d38:	2100      	movs	r1, #0
 8000d3a:	207a      	movs	r0, #122	; 0x7a
 8000d3c:	f000 f998 	bl	8001070 <SD_SendCmd>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d116      	bne.n	8000d74 <SD_disk_ioctl+0x234>
					for (n = 0; n < 4; n++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000d4c:	e00b      	b.n	8000d66 <SD_disk_ioctl+0x226>
						*ptr++ = SPI_RxByte();
 8000d4e:	6a3c      	ldr	r4, [r7, #32]
 8000d50:	1c63      	adds	r3, r4, #1
 8000d52:	623b      	str	r3, [r7, #32]
 8000d54:	f000 f856 	bl	8000e04 <SPI_RxByte>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	7023      	strb	r3, [r4, #0]
					for (n = 0; n < 4; n++)
 8000d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d60:	3301      	adds	r3, #1
 8000d62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000d66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d9ef      	bls.n	8000d4e <SD_disk_ioctl+0x20e>

					res = RES_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}

			default:
				res = RES_PARERR;
 8000d74:	2304      	movs	r3, #4
 8000d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d7a:	e006      	b.n	8000d8a <SD_disk_ioctl+0x24a>
				break;
 8000d7c:	bf00      	nop
 8000d7e:	e004      	b.n	8000d8a <SD_disk_ioctl+0x24a>
				break;
 8000d80:	bf00      	nop
 8000d82:	e002      	b.n	8000d8a <SD_disk_ioctl+0x24a>
				break;
 8000d84:	bf00      	nop
 8000d86:	e000      	b.n	8000d8a <SD_disk_ioctl+0x24a>
				break;
 8000d88:	bf00      	nop
		}

		DESELECT();
 8000d8a:	f000 f817 	bl	8000dbc <DESELECT>
		SPI_RxByte();
 8000d8e:	f000 f839 	bl	8000e04 <SPI_RxByte>
	}

	return res;
 8000d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	372c      	adds	r7, #44	; 0x2c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000000 	.word	0x20000000

08000da4 <SELECT>:
/* Private functions --------------------------------------------------------*/
/*--------------------------------------------------------------------------
 SPI functions
 ---------------------------------------------------------------------------*/
/* slave select */
static void SELECT(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2101      	movs	r1, #1
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <SELECT+0x14>)
 8000dae:	f001 f851 	bl	8001e54 <HAL_GPIO_WritePin>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <DESELECT>:
//-------------------------------------------------------------

/* slave deselect */
static void DESELECT(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DESELECT+0x14>)
 8000dc6:	f001 f845 	bl	8001e54 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40010c00 	.word	0x40010c00

08000dd4 <SPI_TxByte>:
//-------------------------------------------------------------

/* SPI transmit a byte */
static void SPI_TxByte(BYTE data) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000dde:	bf00      	nop
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <SPI_TxByte+0x2c>)
 8000de2:	f001 ffcb 	bl	8002d7c <HAL_SPI_GetState>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d1f9      	bne.n	8000de0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000dec:	1df9      	adds	r1, r7, #7
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	2201      	movs	r2, #1
 8000df2:	4803      	ldr	r0, [pc, #12]	; (8000e00 <SPI_TxByte+0x2c>)
 8000df4:	f001 fce4 	bl	80027c0 <HAL_SPI_Transmit>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200000a8 	.word	0x200000a8

08000e04 <SPI_RxByte>:
//-------------------------------------------------------------

/* SPI receive a byte */
static uint8_t SPI_RxByte(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000e0a:	23ff      	movs	r3, #255	; 0xff
 8000e0c:	71fb      	strb	r3, [r7, #7]
	data = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71bb      	strb	r3, [r7, #6]

	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000e12:	bf00      	nop
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <SPI_RxByte+0x38>)
 8000e16:	f001 ffb1 	bl	8002d7c <HAL_SPI_GetState>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d1f9      	bne.n	8000e14 <SPI_RxByte+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000e20:	1dba      	adds	r2, r7, #6
 8000e22:	1df9      	adds	r1, r7, #7
 8000e24:	2364      	movs	r3, #100	; 0x64
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <SPI_RxByte+0x38>)
 8000e2c:	f001 fe04 	bl	8002a38 <HAL_SPI_TransmitReceive>

	return data;
 8000e30:	79bb      	ldrb	r3, [r7, #6]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000a8 	.word	0x200000a8

08000e40 <SPI_RxBytePtr>:
//-------------------------------------------------------------

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e48:	f7ff ffdc 	bl	8000e04 <SPI_RxByte>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	701a      	strb	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <SD_ReadyWait>:

/*--------------------------------------------------------------------------
 SD functions
 ---------------------------------------------------------------------------*/
/* wait SD ready */
static uint8_t SD_ReadyWait(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	uint8_t res;

	/* 500ms 카운터 준비 */
	Timer2 = 50;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <SD_ReadyWait+0x34>)
 8000e64:	2232      	movs	r2, #50	; 0x32
 8000e66:	701a      	strb	r2, [r3, #0]
	SPI_RxByte();
 8000e68:	f7ff ffcc 	bl	8000e04 <SPI_RxByte>

	do {
		/* 0xFF 값이 수신될 때 까지 SPI 통신 */
		res = SPI_RxByte();
 8000e6c:	f7ff ffca 	bl	8000e04 <SPI_RxByte>
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
	}
	while ((res != 0xFF) && Timer2);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2bff      	cmp	r3, #255	; 0xff
 8000e78:	d004      	beq.n	8000e84 <SD_ReadyWait+0x28>
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SD_ReadyWait+0x34>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f3      	bne.n	8000e6c <SD_ReadyWait+0x10>

	return res;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000430 	.word	0x20000430

08000e94 <SD_PowerOn>:
//-------------------------------------------------------------

/* power on */
static void SD_PowerOn(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
	uint8_t cmd_arg[6];
	uint32_t Count = 0x1FFF;
 8000e9a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e9e:	617b      	str	r3, [r7, #20]

	/* transmit bytes to wake up */
	DESELECT();
 8000ea0:	f7ff ff8c 	bl	8000dbc <DESELECT>

	for (int i = 0; i < 10; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	e005      	b.n	8000eb6 <SD_PowerOn+0x22>
		SPI_TxByte(0xFF);
 8000eaa:	20ff      	movs	r0, #255	; 0xff
 8000eac:	f7ff ff92 	bl	8000dd4 <SPI_TxByte>
	for (int i = 0; i < 10; i++)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b09      	cmp	r3, #9
 8000eba:	ddf6      	ble.n	8000eaa <SD_PowerOn+0x16>

	/* slave select */
	SELECT();
 8000ebc:	f7ff ff72 	bl	8000da4 <SELECT>

	/* make idle state */
	cmd_arg[0] = (CMD0 | 0x40);
 8000ec0:	2340      	movs	r3, #64	; 0x40
 8000ec2:	713b      	strb	r3, [r7, #4]
	cmd_arg[1] = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	717b      	strb	r3, [r7, #5]
	cmd_arg[2] = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71bb      	strb	r3, [r7, #6]
	cmd_arg[3] = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	71fb      	strb	r3, [r7, #7]
	cmd_arg[4] = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	723b      	strb	r3, [r7, #8]
	cmd_arg[5] = 0x95;
 8000ed4:	2395      	movs	r3, #149	; 0x95
 8000ed6:	727b      	strb	r3, [r7, #9]

	/* 명령 전송 */
	for (int i = 0; i < 6; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e009      	b.n	8000ef2 <SD_PowerOn+0x5e>
		SPI_TxByte(cmd_arg[i]);
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff74 	bl	8000dd4 <SPI_TxByte>
	for (int i = 0; i < 6; i++)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	ddf2      	ble.n	8000ede <SD_PowerOn+0x4a>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && Count)
 8000ef8:	e002      	b.n	8000f00 <SD_PowerOn+0x6c>
		Count--;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
	while ((SPI_RxByte() != 0x01) && Count)
 8000f00:	f7ff ff80 	bl	8000e04 <SPI_RxByte>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d002      	beq.n	8000f10 <SD_PowerOn+0x7c>
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f4      	bne.n	8000efa <SD_PowerOn+0x66>

	DESELECT();
 8000f10:	f7ff ff54 	bl	8000dbc <DESELECT>
	SPI_TxByte(0XFF);
 8000f14:	20ff      	movs	r0, #255	; 0xff
 8000f16:	f7ff ff5d 	bl	8000dd4 <SPI_TxByte>

	PowerFlag = 1;
 8000f1a:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <SD_PowerOn+0x94>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000a5 	.word	0x200000a5

08000f2c <SD_PowerOff>:
//-------------------------------------------------------------

/* power off */
static void SD_PowerOff(void) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <SD_PowerOff+0x14>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200000a5 	.word	0x200000a5

08000f44 <SD_CheckPower>:
//-------------------------------------------------------------

/* check power flag */
static uint8_t SD_CheckPower(void) {
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
	return PowerFlag; /*  0=off, 1=on */
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <SD_CheckPower+0x10>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	200000a5 	.word	0x200000a5

08000f58 <SD_RxDataBlock>:
//-------------------------------------------------------------

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	uint8_t token;

	Timer1 = 10; /* timeout 100ms */
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <SD_RxDataBlock+0x68>)
 8000f64:	220a      	movs	r2, #10
 8000f66:	701a      	strb	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000f68:	f7ff ff4c 	bl	8000e04 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
	}
	while ((token == 0xFF) && Timer1);
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d104      	bne.n	8000f80 <SD_RxDataBlock+0x28>
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <SD_RxDataBlock+0x68>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f3      	bne.n	8000f68 <SD_RxDataBlock+0x10>

	/* invalid response */
	if (token != 0xFE) return FALSE;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2bfe      	cmp	r3, #254	; 0xfe
 8000f84:	d001      	beq.n	8000f8a <SD_RxDataBlock+0x32>
 8000f86:	2300      	movs	r3, #0
 8000f88:	e016      	b.n	8000fb8 <SD_RxDataBlock+0x60>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff55 	bl	8000e40 <SPI_RxBytePtr>
		SPI_RxBytePtr(buff++);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff4f 	bl	8000e40 <SPI_RxBytePtr>
	}
	while (btr -= 2);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ed      	bne.n	8000f8a <SD_RxDataBlock+0x32>

	SPI_RxByte(); /* CRC 무시 */
 8000fae:	f7ff ff29 	bl	8000e04 <SPI_RxByte>
	SPI_RxByte();
 8000fb2:	f7ff ff27 	bl	8000e04 <SPI_RxByte>

	return TRUE;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000042e 	.word	0x2000042e

08000fc4 <SD_TxDataBlock>:
//-------------------------------------------------------------

/* transmit data block */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
	uint8_t resp = 0, wc;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	737b      	strb	r3, [r7, #13]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000fd8:	f7ff ff40 	bl	8000e5c <SD_ReadyWait>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2bff      	cmp	r3, #255	; 0xff
 8000fe0:	d001      	beq.n	8000fe6 <SD_TxDataBlock+0x22>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e040      	b.n	8001068 <SD_TxDataBlock+0xa4>

	/* transmit token */
	SPI_TxByte(token);
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fef3 	bl	8000dd4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD) {
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	2bfd      	cmp	r3, #253	; 0xfd
 8000ff2:	d031      	beq.n	8001058 <SD_TxDataBlock+0x94>
		wc = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73bb      	strb	r3, [r7, #14]

		/* 512 바이트 데이터 전송 */
		do {
			SPI_TxByte(*buff++);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fee7 	bl	8000dd4 <SPI_TxByte>
			SPI_TxByte(*buff++);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fee0 	bl	8000dd4 <SPI_TxByte>
		}
		while (--wc);
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	3b01      	subs	r3, #1
 8001018:	73bb      	strb	r3, [r7, #14]
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1eb      	bne.n	8000ff8 <SD_TxDataBlock+0x34>

		SPI_RxByte(); /* CRC 무시 */
 8001020:	f7ff fef0 	bl	8000e04 <SPI_RxByte>
		SPI_RxByte();
 8001024:	f7ff feee 	bl	8000e04 <SPI_RxByte>

		/* 데이트 응답 수신 */
		while (i <= 64) {
 8001028:	e00b      	b.n	8001042 <SD_TxDataBlock+0x7e>
			resp = SPI_RxByte();
 800102a:	f7ff feeb 	bl	8000e04 <SPI_RxByte>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	f003 031f 	and.w	r3, r3, #31
 8001038:	2b05      	cmp	r3, #5
 800103a:	d006      	beq.n	800104a <SD_TxDataBlock+0x86>

			i++;
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	3301      	adds	r3, #1
 8001040:	737b      	strb	r3, [r7, #13]
		while (i <= 64) {
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	2b40      	cmp	r3, #64	; 0x40
 8001046:	d9f0      	bls.n	800102a <SD_TxDataBlock+0x66>
 8001048:	e000      	b.n	800104c <SD_TxDataBlock+0x88>
			if ((resp & 0x1F) == 0x05) break;
 800104a:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800104c:	bf00      	nop
 800104e:	f7ff fed9 	bl	8000e04 <SPI_RxByte>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0fa      	beq.n	800104e <SD_TxDataBlock+0x8a>
	}

	if ((resp & 0x1F) == 0x05)
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2b05      	cmp	r3, #5
 8001060:	d101      	bne.n	8001066 <SD_TxDataBlock+0xa2>
		return TRUE;
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <SD_TxDataBlock+0xa4>
	else
		return FALSE;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <SD_SendCmd>:
#endif /* _READONLY */
//-------------------------------------------------------------

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800107c:	f7ff feee 	bl	8000e5c <SD_ReadyWait>
 8001080:	4603      	mov	r3, r0
 8001082:	2bff      	cmp	r3, #255	; 0xff
 8001084:	d001      	beq.n	800108a <SD_SendCmd+0x1a>
 8001086:	23ff      	movs	r3, #255	; 0xff
 8001088:	e040      	b.n	800110c <SD_SendCmd+0x9c>

	/* transmit command */
	SPI_TxByte(cmd); /* Command */
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fea1 	bl	8000dd4 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	0e1b      	lsrs	r3, r3, #24
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fe9b 	bl	8000dd4 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 16)); /* Argument[23..16] */
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	0c1b      	lsrs	r3, r3, #16
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe95 	bl	8000dd4 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 8)); /* Argument[15..8] */
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fe8f 	bl	8000dd4 <SPI_TxByte>
	SPI_TxByte((BYTE) arg); /* Argument[7..0] */
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe8a 	bl	8000dd4 <SPI_TxByte>

	/* prepare CRC */
	crc = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b40      	cmp	r3, #64	; 0x40
 80010c8:	d101      	bne.n	80010ce <SD_SendCmd+0x5e>
 80010ca:	2395      	movs	r3, #149	; 0x95
 80010cc:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD8) crc = 0x87; /* CRC for CMD8(0x1AA) */
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b48      	cmp	r3, #72	; 0x48
 80010d2:	d101      	bne.n	80010d8 <SD_SendCmd+0x68>
 80010d4:	2387      	movs	r3, #135	; 0x87
 80010d6:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fe7a 	bl	8000dd4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b4c      	cmp	r3, #76	; 0x4c
 80010e4:	d101      	bne.n	80010ea <SD_SendCmd+0x7a>
 80010e6:	f7ff fe8d 	bl	8000e04 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80010ea:	230a      	movs	r3, #10
 80010ec:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80010ee:	f7ff fe89 	bl	8000e04 <SPI_RxByte>
 80010f2:	4603      	mov	r3, r0
 80010f4:	737b      	strb	r3, [r7, #13]
	}
	while ((res & 0x80) && --n);
 80010f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da05      	bge.n	800110a <SD_SendCmd+0x9a>
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	3b01      	subs	r3, #1
 8001102:	73bb      	strb	r3, [r7, #14]
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f1      	bne.n	80010ee <SD_SendCmd+0x7e>

	return res;
 800110a:	7b7b      	ldrb	r3, [r7, #13]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 fbd2 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f816 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f000 f8b0 	bl	8001284 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001124:	f000 f84e 	bl	80011c4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001128:	f002 f894 	bl	8003254 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800112c:	f000 f880 	bl	8001230 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	microSD_init();
 8001130:	f000 f91a 	bl	8001368 <microSD_init>
	microSD_getSize();
 8001134:	f000 f93a 	bl	80013ac <microSD_getSize>
	microSD_put("prueba1.txt");
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <main+0x34>)
 800113a:	f000 f9a9 	bl	8001490 <microSD_put>
	microSD_get("prueba1.txt");
 800113e:	4802      	ldr	r0, [pc, #8]	; (8001148 <main+0x34>)
 8001140:	f000 f9e6 	bl	8001510 <microSD_get>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001144:	e7fe      	b.n	8001144 <main+0x30>
 8001146:	bf00      	nop
 8001148:	08006f2c 	.word	0x08006f2c

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	; 0x40
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2228      	movs	r2, #40	; 0x28
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f005 fa58 	bl	8006610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fe7e 	bl	8001e84 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800118e:	f000 fa09 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 f8ec 	bl	8002388 <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011b6:	f000 f9f5 	bl	80015a4 <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	3740      	adds	r7, #64	; 0x40
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_SPI1_Init+0x64>)
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <MX_SPI1_Init+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_SPI1_Init+0x64>)
 80011d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_SPI1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_SPI1_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_SPI1_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI1_Init+0x64>)
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_SPI1_Init+0x64>)
 80011f8:	2208      	movs	r2, #8
 80011fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_SPI1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MX_SPI1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_SPI1_Init+0x64>)
 8001210:	220a      	movs	r2, #10
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_SPI1_Init+0x64>)
 8001216:	f001 fa4f 	bl	80026b8 <HAL_SPI_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001220:	f000 f9c0 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200000a8 	.word	0x200000a8
 800122c:	40013000 	.word	0x40013000

08001230 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_USART1_UART_Init+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_USART1_UART_Init+0x4c>)
 800123c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USART1_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART1_UART_Init+0x4c>)
 8001268:	f001 fe3c 	bl	8002ee4 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001272:	f000 f997 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000100 	.word	0x20000100
 8001280:	40013800 	.word	0x40013800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_GPIO_Init+0x74>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <MX_GPIO_Init+0x74>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_GPIO_Init+0x74>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_GPIO_Init+0x74>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <MX_GPIO_Init+0x74>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_GPIO_Init+0x74>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2101      	movs	r1, #1
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_GPIO_Init+0x78>)
 80012ce:	f000 fdc1 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80012d2:	2301      	movs	r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2302      	movs	r3, #2
 80012e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_GPIO_Init+0x78>)
 80012ea:	f000 fc2f 	bl	8001b4c <HAL_GPIO_Init>

}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010c00 	.word	0x40010c00

08001300 <bufclear>:

/* USER CODE BEGIN 4 */
//Funcion para limiar el buffer
static void bufclear(char *buf, uint16_t len) {
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++) {
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	e007      	b.n	8001322 <bufclear+0x22>
		buf[i] = '\0';
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3301      	adds	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	429a      	cmp	r2, r3
 8001328:	dbf3      	blt.n	8001312 <bufclear+0x12>
	}
}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
	...

08001338 <send_uart>:
//------------------------------------------------------------

static void send_uart(char *string) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7fe ff03 	bl	800014c <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t*) string, len, 2000);
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	b29a      	uxth	r2, r3
 800134e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <send_uart+0x2c>)
 8001356:	f001 fe12 	bl	8002f7e <HAL_UART_Transmit>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000100 	.word	0x20000100

08001368 <microSD_init>:
//------------------------------------------------------------

//Montamos el sistema de archivos
static void microSD_init(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 800136c:	2201      	movs	r2, #1
 800136e:	490a      	ldr	r1, [pc, #40]	; (8001398 <microSD_init+0x30>)
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <microSD_init+0x34>)
 8001372:	f004 f9cb 	bl	800570c <f_mount>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <microSD_init+0x38>)
 800137c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <microSD_init+0x38>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <microSD_init+0x26>
		send_uart("ERROR!!! montaje tarjeta microSD fallido...\n");
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <microSD_init+0x3c>)
 8001388:	f7ff ffd6 	bl	8001338 <send_uart>
	else
		send_uart("microSD CARD montada con exito\n");
}
 800138c:	e002      	b.n	8001394 <microSD_init+0x2c>
		send_uart("microSD CARD montada con exito\n");
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <microSD_init+0x40>)
 8001390:	f7ff ffd2 	bl	8001338 <send_uart>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	08006f38 	.word	0x08006f38
 800139c:	20000144 	.word	0x20000144
 80013a0:	200003a0 	.word	0x200003a0
 80013a4:	08006f3c 	.word	0x08006f3c
 80013a8:	08006f6c 	.word	0x08006f6c

080013ac <microSD_getSize>:
//------------------------------------------------------------

//leemos la capacidad y el espacio libre
static void microSD_getSize(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
	f_getfree("", &fre_clust, &pfs);	//check free space
 80013b2:	4a30      	ldr	r2, [pc, #192]	; (8001474 <microSD_getSize+0xc8>)
 80013b4:	4930      	ldr	r1, [pc, #192]	; (8001478 <microSD_getSize+0xcc>)
 80013b6:	4831      	ldr	r0, [pc, #196]	; (800147c <microSD_getSize+0xd0>)
 80013b8:	f004 febe 	bl	8006138 <f_getfree>

	//get microSD size in KB
	uint32_t total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <microSD_getSize+0xc8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80013c4:	3b02      	subs	r3, #2
 80013c6:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <microSD_getSize+0xc8>)
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f92e 	bl	8000634 <__aeabi_ui2d>
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <microSD_getSize+0xd4>)
 80013de:	f7fe febd 	bl	800015c <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff f99d 	bl	8000728 <__aeabi_d2uiz>
 80013ee:	4603      	mov	r3, r0
 80013f0:	60fb      	str	r3, [r7, #12]
	sprintf(buffer, "SD CARD Total Size: \t%luKB\n", total);
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4923      	ldr	r1, [pc, #140]	; (8001484 <microSD_getSize+0xd8>)
 80013f6:	4824      	ldr	r0, [pc, #144]	; (8001488 <microSD_getSize+0xdc>)
 80013f8:	f005 f912 	bl	8006620 <siprintf>
	send_uart(buffer);
 80013fc:	4822      	ldr	r0, [pc, #136]	; (8001488 <microSD_getSize+0xdc>)
 80013fe:	f7ff ff9b 	bl	8001338 <send_uart>
	uint16_t len = strlen(buffer);
 8001402:	4821      	ldr	r0, [pc, #132]	; (8001488 <microSD_getSize+0xdc>)
 8001404:	f7fe fea2 	bl	800014c <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	817b      	strh	r3, [r7, #10]
	bufclear(buffer, len);
 800140c:	897b      	ldrh	r3, [r7, #10]
 800140e:	4619      	mov	r1, r3
 8001410:	481d      	ldr	r0, [pc, #116]	; (8001488 <microSD_getSize+0xdc>)
 8001412:	f7ff ff75 	bl	8001300 <bufclear>

	//get free space in KB
	uint32_t freeSpace;
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <microSD_getSize+0xc8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800141e:	461a      	mov	r2, r3
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <microSD_getSize+0xcc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f903 	bl	8000634 <__aeabi_ui2d>
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <microSD_getSize+0xd4>)
 8001434:	f7fe fe92 	bl	800015c <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff f972 	bl	8000728 <__aeabi_d2uiz>
 8001444:	4603      	mov	r3, r0
 8001446:	607b      	str	r3, [r7, #4]
	sprintf(buffer, "SD CARD Free Space: \t%luKB\n\n", freeSpace);
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4910      	ldr	r1, [pc, #64]	; (800148c <microSD_getSize+0xe0>)
 800144c:	480e      	ldr	r0, [pc, #56]	; (8001488 <microSD_getSize+0xdc>)
 800144e:	f005 f8e7 	bl	8006620 <siprintf>
	send_uart(buffer);
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <microSD_getSize+0xdc>)
 8001454:	f7ff ff70 	bl	8001338 <send_uart>
	len = strlen(buffer);
 8001458:	480b      	ldr	r0, [pc, #44]	; (8001488 <microSD_getSize+0xdc>)
 800145a:	f7fe fe77 	bl	800014c <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	817b      	strh	r3, [r7, #10]
	bufclear(buffer, len);
 8001462:	897b      	ldrh	r3, [r7, #10]
 8001464:	4619      	mov	r1, r3
 8001466:	4808      	ldr	r0, [pc, #32]	; (8001488 <microSD_getSize+0xdc>)
 8001468:	f7ff ff4a 	bl	8001300 <bufclear>
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200003a4 	.word	0x200003a4
 8001478:	200003a8 	.word	0x200003a8
 800147c:	08006f8c 	.word	0x08006f8c
 8001480:	3fe00000 	.word	0x3fe00000
 8001484:	08006f90 	.word	0x08006f90
 8001488:	200003ac 	.word	0x200003ac
 800148c:	08006fac 	.word	0x08006fac

08001490 <microSD_put>:
//------------------------------------------------------------

//guardamos informacion con PUTS
static void microSD_put(char *name) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	//Open file to write/ create a file if it doesn't exist
	fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001498:	2213      	movs	r2, #19
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4816      	ldr	r0, [pc, #88]	; (80014f8 <microSD_put+0x68>)
 800149e:	f004 f97d 	bl	800579c <f_open>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <microSD_put+0x6c>)
 80014a8:	701a      	strb	r2, [r3, #0]

	//Write data
	f_puts("Prueba PUTS, suscribete Prro!\n", &fil);
 80014aa:	4913      	ldr	r1, [pc, #76]	; (80014f8 <microSD_put+0x68>)
 80014ac:	4814      	ldr	r0, [pc, #80]	; (8001500 <microSD_put+0x70>)
 80014ae:	f004 ff8a 	bl	80063c6 <f_puts>

	//Close file
	fresult = f_close(&fil);
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <microSD_put+0x68>)
 80014b4:	f004 fe1a 	bl	80060ec <f_close>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <microSD_put+0x6c>)
 80014be:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK) {
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <microSD_put+0x6c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d108      	bne.n	80014da <microSD_put+0x4a>
		sprintf(buffer, "%s%s", name, " creado y los datos fueron escritos\n");
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <microSD_put+0x74>)
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	490e      	ldr	r1, [pc, #56]	; (8001508 <microSD_put+0x78>)
 80014ce:	480f      	ldr	r0, [pc, #60]	; (800150c <microSD_put+0x7c>)
 80014d0:	f005 f8a6 	bl	8006620 <siprintf>
		send_uart(buffer);
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <microSD_put+0x7c>)
 80014d6:	f7ff ff2f 	bl	8001338 <send_uart>
	}

	uint8_t len = strlen(buffer);
 80014da:	480c      	ldr	r0, [pc, #48]	; (800150c <microSD_put+0x7c>)
 80014dc:	f7fe fe36 	bl	800014c <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
	bufclear(buffer, len);
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	4808      	ldr	r0, [pc, #32]	; (800150c <microSD_put+0x7c>)
 80014ec:	f7ff ff08 	bl	8001300 <bufclear>
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000374 	.word	0x20000374
 80014fc:	200003a0 	.word	0x200003a0
 8001500:	08006fcc 	.word	0x08006fcc
 8001504:	08006fec 	.word	0x08006fec
 8001508:	08007014 	.word	0x08007014
 800150c:	200003ac 	.word	0x200003ac

08001510 <microSD_get>:
//------------------------------------------------------------

//guardamos informacion con PUTS
static void microSD_get(char *name) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b090      	sub	sp, #64	; 0x40
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	//Open file to read
	fresult = f_open(&fil, name, FA_READ);
 8001518:	2201      	movs	r2, #1
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	481b      	ldr	r0, [pc, #108]	; (800158c <microSD_get+0x7c>)
 800151e:	f004 f93d 	bl	800579c <f_open>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <microSD_get+0x80>)
 8001528:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK) {
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <microSD_get+0x80>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d128      	bne.n	8001584 <microSD_get+0x74>
		//Read data from the file */
		f_gets(buffer, f_size(&fil), &fil);
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <microSD_get+0x7c>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <microSD_get+0x7c>)
 8001538:	4619      	mov	r1, r3
 800153a:	4816      	ldr	r0, [pc, #88]	; (8001594 <microSD_get+0x84>)
 800153c:	f004 fec9 	bl	80062d2 <f_gets>

		char msg[50];
		sprintf(msg, "%s%s", name,
 8001540:	f107 000c 	add.w	r0, r7, #12
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <microSD_get+0x88>)
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4914      	ldr	r1, [pc, #80]	; (800159c <microSD_get+0x8c>)
 800154a:	f005 f869 	bl	8006620 <siprintf>
				" Fue abierto y contiene los siguientes datos:\n");
		send_uart(msg);
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fef0 	bl	8001338 <send_uart>
		send_uart(buffer);
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <microSD_get+0x84>)
 800155a:	f7ff feed 	bl	8001338 <send_uart>
		send_uart("\n");
 800155e:	4810      	ldr	r0, [pc, #64]	; (80015a0 <microSD_get+0x90>)
 8001560:	f7ff feea 	bl	8001338 <send_uart>

		/* Close file */
		f_close(&fil);
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <microSD_get+0x7c>)
 8001566:	f004 fdc1 	bl	80060ec <f_close>
		uint8_t len = strlen(buffer);
 800156a:	480a      	ldr	r0, [pc, #40]	; (8001594 <microSD_get+0x84>)
 800156c:	f7fe fdee 	bl	800014c <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		bufclear(buffer, len);
 8001576:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800157a:	b29b      	uxth	r3, r3
 800157c:	4619      	mov	r1, r3
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <microSD_get+0x84>)
 8001580:	f7ff febe 	bl	8001300 <bufclear>
	}
}
 8001584:	bf00      	nop
 8001586:	3740      	adds	r7, #64	; 0x40
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000374 	.word	0x20000374
 8001590:	200003a0 	.word	0x200003a0
 8001594:	200003ac 	.word	0x200003ac
 8001598:	0800701c 	.word	0x0800701c
 800159c:	08007014 	.word	0x08007014
 80015a0:	0800704c 	.word	0x0800704c

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>
	...

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_MspInit+0x5c>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_MspInit+0x5c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6193      	str	r3, [r2, #24]
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_MspInit+0x5c>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x5c>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_MspInit+0x5c>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_MspInit+0x5c>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_MspInit+0x60>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_MspInit+0x60>)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000

08001614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_SPI_MspInit+0x88>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d12f      	bne.n	8001694 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_SPI_MspInit+0x8c>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_SPI_MspInit+0x8c>)
 800163a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_SPI_MspInit+0x8c>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_SPI_MspInit+0x8c>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <HAL_SPI_MspInit+0x8c>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_SPI_MspInit+0x8c>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001664:	23a0      	movs	r3, #160	; 0xa0
 8001666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <HAL_SPI_MspInit+0x90>)
 8001678:	f000 fa68 	bl	8001b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800167c:	2340      	movs	r3, #64	; 0x40
 800167e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_SPI_MspInit+0x90>)
 8001690:	f000 fa5c 	bl	8001b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40013000 	.word	0x40013000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010800 	.word	0x40010800

080016a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <HAL_UART_MspInit+0x8c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d131      	bne.n	800172c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_UART_MspInit+0x90>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <HAL_UART_MspInit+0x90>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_UART_MspInit+0x90>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_UART_MspInit+0x90>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_UART_MspInit+0x90>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_UART_MspInit+0x90>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4619      	mov	r1, r3
 800170c:	480b      	ldr	r0, [pc, #44]	; (800173c <HAL_UART_MspInit+0x94>)
 800170e:	f000 fa1d 	bl	8001b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_UART_MspInit+0x94>)
 8001728:	f000 fa10 	bl	8001b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013800 	.word	0x40013800
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800

08001740 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void) {
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	if(Timer1>0) Timer1--;
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <SDTimer_Handler+0x3c>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <SDTimer_Handler+0x1c>
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <SDTimer_Handler+0x3c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <SDTimer_Handler+0x3c>)
 800175a:	801a      	strh	r2, [r3, #0]
	if(Timer2>0) Timer2--;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <SDTimer_Handler+0x40>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <SDTimer_Handler+0x34>
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <SDTimer_Handler+0x40>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <SDTimer_Handler+0x40>)
 8001772:	801a      	strh	r2, [r3, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	2000042e 	.word	0x2000042e
 8001780:	20000430 	.word	0x20000430

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <SysTick_Handler+0x30>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <SysTick_Handler+0x30>)
 80017d8:	701a      	strb	r2, [r3, #0]
		if(FatFsCnt>10) {
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <SysTick_Handler+0x30>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b0a      	cmp	r3, #10
 80017e2:	d904      	bls.n	80017ee <SysTick_Handler+0x26>
			FatFsCnt = 0;
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SysTick_Handler+0x30>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
			SDTimer_Handler();
 80017ea:	f7ff ffa9 	bl	8001740 <SDTimer_Handler>
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 f8ad 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000042c 	.word	0x2000042c

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f004 fec6 	bl	80065bc <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20005000 	.word	0x20005000
 800185c:	00000400 	.word	0x00000400
 8001860:	20000434 	.word	0x20000434
 8001864:	20000680 	.word	0x20000680

08001868 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001876:	490d      	ldr	r1, [pc, #52]	; (80018ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800188c:	4c0a      	ldr	r4, [pc, #40]	; (80018b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800189a:	f7ff ffe5 	bl	8001868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189e:	f004 fe93 	bl	80065c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018a2:	f7ff fc37 	bl	8001114 <main>
  bx lr
 80018a6:	4770      	bx	lr
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80018b0:	0800764c 	.word	0x0800764c
  ldr r2, =_sbss
 80018b4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80018b8:	20000680 	.word	0x20000680

080018bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_2_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_Init+0x28>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_Init+0x28>)
 80018ca:	f043 0310 	orr.w	r3, r3, #16
 80018ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f907 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	200f      	movs	r0, #15
 80018d8:	f000 f808 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff fe68 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f911 	bl	8001b32 <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f8e7 	bl	8001afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000004 	.word	0x20000004
 8001944:	2000000c 	.word	0x2000000c
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_IncTick+0x1c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_IncTick+0x20>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_IncTick+0x20>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	2000000c 	.word	0x2000000c
 800196c:	20000438 	.word	0x20000438

08001970 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <HAL_GetTick+0x10>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	20000438 	.word	0x20000438

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f7ff ff90 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff49 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0c:	f7ff ff5e 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	6978      	ldr	r0, [r7, #20]
 8001b18:	f7ff ff90 	bl	8001a3c <NVIC_EncodePriority>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff5f 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffb0 	bl	8001aa0 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b08b      	sub	sp, #44	; 0x2c
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	e169      	b.n	8001e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b60:	2201      	movs	r2, #1
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8158 	bne.w	8001e2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a9a      	ldr	r2, [pc, #616]	; (8001dec <HAL_GPIO_Init+0x2a0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d05e      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001b88:	4a98      	ldr	r2, [pc, #608]	; (8001dec <HAL_GPIO_Init+0x2a0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d875      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001b8e:	4a98      	ldr	r2, [pc, #608]	; (8001df0 <HAL_GPIO_Init+0x2a4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d058      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001b94:	4a96      	ldr	r2, [pc, #600]	; (8001df0 <HAL_GPIO_Init+0x2a4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d86f      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001b9a:	4a96      	ldr	r2, [pc, #600]	; (8001df4 <HAL_GPIO_Init+0x2a8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d052      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001ba0:	4a94      	ldr	r2, [pc, #592]	; (8001df4 <HAL_GPIO_Init+0x2a8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d869      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001ba6:	4a94      	ldr	r2, [pc, #592]	; (8001df8 <HAL_GPIO_Init+0x2ac>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04c      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001bac:	4a92      	ldr	r2, [pc, #584]	; (8001df8 <HAL_GPIO_Init+0x2ac>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d863      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bb2:	4a92      	ldr	r2, [pc, #584]	; (8001dfc <HAL_GPIO_Init+0x2b0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d046      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
 8001bb8:	4a90      	ldr	r2, [pc, #576]	; (8001dfc <HAL_GPIO_Init+0x2b0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d85d      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bbe:	2b12      	cmp	r3, #18
 8001bc0:	d82a      	bhi.n	8001c18 <HAL_GPIO_Init+0xcc>
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d859      	bhi.n	8001c7a <HAL_GPIO_Init+0x12e>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <HAL_GPIO_Init+0x80>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001c47 	.word	0x08001c47
 8001bd0:	08001c21 	.word	0x08001c21
 8001bd4:	08001c33 	.word	0x08001c33
 8001bd8:	08001c75 	.word	0x08001c75
 8001bdc:	08001c7b 	.word	0x08001c7b
 8001be0:	08001c7b 	.word	0x08001c7b
 8001be4:	08001c7b 	.word	0x08001c7b
 8001be8:	08001c7b 	.word	0x08001c7b
 8001bec:	08001c7b 	.word	0x08001c7b
 8001bf0:	08001c7b 	.word	0x08001c7b
 8001bf4:	08001c7b 	.word	0x08001c7b
 8001bf8:	08001c7b 	.word	0x08001c7b
 8001bfc:	08001c7b 	.word	0x08001c7b
 8001c00:	08001c7b 	.word	0x08001c7b
 8001c04:	08001c7b 	.word	0x08001c7b
 8001c08:	08001c7b 	.word	0x08001c7b
 8001c0c:	08001c7b 	.word	0x08001c7b
 8001c10:	08001c29 	.word	0x08001c29
 8001c14:	08001c3d 	.word	0x08001c3d
 8001c18:	4a79      	ldr	r2, [pc, #484]	; (8001e00 <HAL_GPIO_Init+0x2b4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c1e:	e02c      	b.n	8001c7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e029      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e024      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	3308      	adds	r3, #8
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e01f      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	330c      	adds	r3, #12
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	e01a      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e013      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	611a      	str	r2, [r3, #16]
          break;
 8001c66:	e009      	b.n	8001c7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	615a      	str	r2, [r3, #20]
          break;
 8001c72:	e003      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x130>
          break;
 8001c7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2bff      	cmp	r3, #255	; 0xff
 8001c80:	d801      	bhi.n	8001c86 <HAL_GPIO_Init+0x13a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_Init+0x13e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d802      	bhi.n	8001c98 <HAL_GPIO_Init+0x14c>
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_GPIO_Init+0x152>
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	3b08      	subs	r3, #8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	210f      	movs	r1, #15
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80b1 	beq.w	8001e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <HAL_GPIO_Init+0x2b8>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_GPIO_Init+0x2b8>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <HAL_GPIO_Init+0x2b8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ce4:	4a48      	ldr	r2, [pc, #288]	; (8001e08 <HAL_GPIO_Init+0x2bc>)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a40      	ldr	r2, [pc, #256]	; (8001e0c <HAL_GPIO_Init+0x2c0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <HAL_GPIO_Init+0x1ec>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3f      	ldr	r2, [pc, #252]	; (8001e10 <HAL_GPIO_Init+0x2c4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00d      	beq.n	8001d34 <HAL_GPIO_Init+0x1e8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3e      	ldr	r2, [pc, #248]	; (8001e14 <HAL_GPIO_Init+0x2c8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d007      	beq.n	8001d30 <HAL_GPIO_Init+0x1e4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3d      	ldr	r2, [pc, #244]	; (8001e18 <HAL_GPIO_Init+0x2cc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_GPIO_Init+0x1e0>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	e004      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_GPIO_Init+0x1ee>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3c:	f002 0203 	and.w	r2, r2, #3
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4093      	lsls	r3, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d4a:	492f      	ldr	r1, [pc, #188]	; (8001e08 <HAL_GPIO_Init+0x2bc>)
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	492c      	ldr	r1, [pc, #176]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	4928      	ldr	r1, [pc, #160]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d8c:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4922      	ldr	r1, [pc, #136]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	491e      	ldr	r1, [pc, #120]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4918      	ldr	r1, [pc, #96]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4914      	ldr	r1, [pc, #80]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d021      	beq.n	8001e20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_GPIO_Init+0x2d0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
 8001de8:	e021      	b.n	8001e2e <HAL_GPIO_Init+0x2e2>
 8001dea:	bf00      	nop
 8001dec:	10320000 	.word	0x10320000
 8001df0:	10310000 	.word	0x10310000
 8001df4:	10220000 	.word	0x10220000
 8001df8:	10210000 	.word	0x10210000
 8001dfc:	10120000 	.word	0x10120000
 8001e00:	10110000 	.word	0x10110000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40011400 	.word	0x40011400
 8001e1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_GPIO_Init+0x304>)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	4909      	ldr	r1, [pc, #36]	; (8001e50 <HAL_GPIO_Init+0x304>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	3301      	adds	r3, #1
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f47f ae8e 	bne.w	8001b60 <HAL_GPIO_Init+0x14>
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	372c      	adds	r7, #44	; 0x2c
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e70:	e003      	b.n	8001e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e272      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8087 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea4:	4b92      	ldr	r3, [pc, #584]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d00c      	beq.n	8001eca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb0:	4b8f      	ldr	r3, [pc, #572]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d112      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x5e>
 8001ebc:	4b8c      	ldr	r3, [pc, #560]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eca:	4b89      	ldr	r3, [pc, #548]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d06c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x12c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d168      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e24c      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x76>
 8001eec:	4b80      	ldr	r3, [pc, #512]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a7f      	ldr	r2, [pc, #508]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e02e      	b.n	8001f58 <HAL_RCC_OscConfig+0xd4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x98>
 8001f02:	4b7b      	ldr	r3, [pc, #492]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7a      	ldr	r2, [pc, #488]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b78      	ldr	r3, [pc, #480]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a77      	ldr	r2, [pc, #476]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xd4>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0xbc>
 8001f26:	4b72      	ldr	r3, [pc, #456]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a71      	ldr	r2, [pc, #452]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6e      	ldr	r2, [pc, #440]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xd4>
 8001f40:	4b6b      	ldr	r3, [pc, #428]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6a      	ldr	r2, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b68      	ldr	r3, [pc, #416]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a67      	ldr	r2, [pc, #412]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fd06 	bl	8001970 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fd02 	bl	8001970 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e200      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b5d      	ldr	r3, [pc, #372]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe4>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fcf2 	bl	8001970 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fcee 	bl	8001970 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1ec      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x10c>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d063      	beq.n	8002086 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fca:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x18c>
 8001fd6:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x176>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1c0      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4939      	ldr	r1, [pc, #228]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_RCC_OscConfig+0x270>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff fca7 	bl	8001970 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff fca3 	bl	8001970 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1a1      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4927      	ldr	r1, [pc, #156]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x270>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fc86 	bl	8001970 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff fc82 	bl	8001970 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e180      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d03a      	beq.n	8002108 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d019      	beq.n	80020ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7ff fc66 	bl	8001970 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff fc62 	bl	8001970 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e160      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020c6:	2001      	movs	r0, #1
 80020c8:	f000 fad8 	bl	800267c <RCC_Delay>
 80020cc:	e01c      	b.n	8002108 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7ff fc4c 	bl	8001970 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020da:	e00f      	b.n	80020fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7ff fc48 	bl	8001970 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d908      	bls.n	80020fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e146      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	42420000 	.word	0x42420000
 80020f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	4b92      	ldr	r3, [pc, #584]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e9      	bne.n	80020dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80a6 	beq.w	8002262 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211a:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10d      	bne.n	8002142 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a87      	ldr	r2, [pc, #540]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b85      	ldr	r3, [pc, #532]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213e:	2301      	movs	r3, #1
 8002140:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b82      	ldr	r3, [pc, #520]	; (800234c <HAL_RCC_OscConfig+0x4c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d118      	bne.n	8002180 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214e:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x4c8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7e      	ldr	r2, [pc, #504]	; (800234c <HAL_RCC_OscConfig+0x4c8>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215a:	f7ff fc09 	bl	8001970 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002162:	f7ff fc05 	bl	8001970 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e103      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	4b75      	ldr	r3, [pc, #468]	; (800234c <HAL_RCC_OscConfig+0x4c8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x312>
 8002188:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	e02d      	b.n	80021f2 <HAL_RCC_OscConfig+0x36e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x334>
 800219e:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a69      	ldr	r2, [pc, #420]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a66      	ldr	r2, [pc, #408]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	6213      	str	r3, [r2, #32]
 80021b6:	e01c      	b.n	80021f2 <HAL_RCC_OscConfig+0x36e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d10c      	bne.n	80021da <HAL_RCC_OscConfig+0x356>
 80021c0:	4b61      	ldr	r3, [pc, #388]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a60      	ldr	r2, [pc, #384]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	4b5e      	ldr	r3, [pc, #376]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a5d      	ldr	r2, [pc, #372]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6213      	str	r3, [r2, #32]
 80021d8:	e00b      	b.n	80021f2 <HAL_RCC_OscConfig+0x36e>
 80021da:	4b5b      	ldr	r3, [pc, #364]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a5a      	ldr	r2, [pc, #360]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6213      	str	r3, [r2, #32]
 80021e6:	4b58      	ldr	r3, [pc, #352]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a57      	ldr	r2, [pc, #348]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d015      	beq.n	8002226 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff fbb9 	bl	8001970 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7ff fbb5 	bl	8001970 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0b1      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ee      	beq.n	8002202 <HAL_RCC_OscConfig+0x37e>
 8002224:	e014      	b.n	8002250 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7ff fba3 	bl	8001970 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7ff fb9f 	bl	8001970 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	; 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e09b      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ee      	bne.n	800222e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d105      	bne.n	8002262 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002256:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a3b      	ldr	r2, [pc, #236]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002260:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8087 	beq.w	800237a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800226c:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d061      	beq.n	800233c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d146      	bne.n	800230e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7ff fb73 	bl	8001970 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228e:	f7ff fb6f 	bl	8001970 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e06d      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a0:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d108      	bne.n	80022c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4921      	ldr	r1, [pc, #132]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a19      	ldr	r1, [r3, #32]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	430b      	orrs	r3, r1
 80022da:	491b      	ldr	r1, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff fb43 	bl	8001970 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7ff fb3f 	bl	8001970 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e03d      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x46a>
 800230c:	e035      	b.n	800237a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fb2c 	bl	8001970 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff fb28 	bl	8001970 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e026      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x498>
 800233a:	e01e      	b.n	800237a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d107      	bne.n	8002354 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e019      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
 8002350:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x500>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	429a      	cmp	r2, r3
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000

08002388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0d0      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b6a      	ldr	r3, [pc, #424]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d910      	bls.n	80023cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b67      	ldr	r3, [pc, #412]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	4965      	ldr	r1, [pc, #404]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d040      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d115      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e073      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06b      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7ff fa7a 	bl	8001970 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7ff fa76 	bl	8001970 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e053      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d210      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4922      	ldr	r1, [pc, #136]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1cc>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1d0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f9d8 	bl	80018ec <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	080070a8 	.word	0x080070a8
 8002554:	20000004 	.word	0x20000004
 8002558:	20000008 	.word	0x20000008

0800255c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	b490      	push	{r4, r7}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_RCC_GetSysClockFreq+0xac>)
 8002564:	1d3c      	adds	r4, r7, #4
 8002566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800256c:	f240 2301 	movw	r3, #513	; 0x201
 8002570:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b04      	cmp	r3, #4
 8002594:	d002      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x40>
 8002596:	2b08      	cmp	r3, #8
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x46>
 800259a:	e02b      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_RCC_GetSysClockFreq+0xb4>)
 800259e:	623b      	str	r3, [r7, #32]
      break;
 80025a0:	e02b      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3328      	adds	r3, #40	; 0x28
 80025ac:	443b      	add	r3, r7
 80025ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d012      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	0c5b      	lsrs	r3, r3, #17
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	3328      	adds	r3, #40	; 0x28
 80025ca:	443b      	add	r3, r7
 80025cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025d6:	fb03 f202 	mul.w	r2, r3, r2
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
 80025e2:	e004      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	623b      	str	r3, [r7, #32]
      break;
 80025f2:	e002      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025f6:	623b      	str	r3, [r7, #32]
      break;
 80025f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fa:	6a3b      	ldr	r3, [r7, #32]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3728      	adds	r7, #40	; 0x28
 8002600:	46bd      	mov	sp, r7
 8002602:	bc90      	pop	{r4, r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	08007050 	.word	0x08007050
 800260c:	40021000 	.word	0x40021000
 8002610:	007a1200 	.word	0x007a1200
 8002614:	003d0900 	.word	0x003d0900

08002618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800261c:	4b02      	ldr	r3, [pc, #8]	; (8002628 <HAL_RCC_GetHCLKFreq+0x10>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002630:	f7ff fff2 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	080070b8 	.word	0x080070b8

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002658:	f7ff ffde 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	0adb      	lsrs	r3, r3, #11
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	080070b8 	.word	0x080070b8

0800267c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <RCC_Delay+0x34>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <RCC_Delay+0x38>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0a5b      	lsrs	r3, r3, #9
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002698:	bf00      	nop
  }
  while (Delay --);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	60fa      	str	r2, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f9      	bne.n	8002698 <RCC_Delay+0x1c>
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	20000004 	.word	0x20000004
 80026b4:	10624dd3 	.word	0x10624dd3

080026b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e076      	b.n	80027b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026da:	d009      	beq.n	80026f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
 80026e2:	e005      	b.n	80026f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe ff82 	bl	8001614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002726:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	ea42 0103 	orr.w	r1, r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	0c1a      	lsrs	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f002 0204 	and.w	r2, r2, #4
 8002796:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_SPI_Transmit+0x22>
 80027de:	2302      	movs	r3, #2
 80027e0:	e126      	b.n	8002a30 <HAL_SPI_Transmit+0x270>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ea:	f7ff f8c1 	bl	8001970 <HAL_GetTick>
 80027ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d002      	beq.n	8002806 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002800:	2302      	movs	r3, #2
 8002802:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002804:	e10b      	b.n	8002a1e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_SPI_Transmit+0x52>
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002816:	e102      	b.n	8002a1e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2203      	movs	r2, #3
 800281c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285e:	d10f      	bne.n	8002880 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800286e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800287e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d007      	beq.n	800289e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a6:	d14b      	bne.n	8002940 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_SPI_Transmit+0xf6>
 80028b0:	8afb      	ldrh	r3, [r7, #22]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d13e      	bne.n	8002934 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	1c9a      	adds	r2, r3, #2
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028da:	e02b      	b.n	8002934 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d112      	bne.n	8002910 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	881a      	ldrh	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	1c9a      	adds	r2, r3, #2
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	86da      	strh	r2, [r3, #54]	; 0x36
 800290e:	e011      	b.n	8002934 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002910:	f7ff f82e 	bl	8001970 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d803      	bhi.n	8002928 <HAL_SPI_Transmit+0x168>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d102      	bne.n	800292e <HAL_SPI_Transmit+0x16e>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002932:	e074      	b.n	8002a1e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1ce      	bne.n	80028dc <HAL_SPI_Transmit+0x11c>
 800293e:	e04c      	b.n	80029da <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_SPI_Transmit+0x18e>
 8002948:	8afb      	ldrh	r3, [r7, #22]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d140      	bne.n	80029d0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	330c      	adds	r3, #12
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002974:	e02c      	b.n	80029d0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d113      	bne.n	80029ac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80029aa:	e011      	b.n	80029d0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029ac:	f7fe ffe0 	bl	8001970 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d803      	bhi.n	80029c4 <HAL_SPI_Transmit+0x204>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c2:	d102      	bne.n	80029ca <HAL_SPI_Transmit+0x20a>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029ce:	e026      	b.n	8002a1e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1cd      	bne.n	8002976 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fa62 	bl	8002ea8 <SPI_EndRxTxTransaction>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	77fb      	strb	r3, [r7, #31]
 8002a1a:	e000      	b.n	8002a1e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08c      	sub	sp, #48	; 0x30
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a46:	2301      	movs	r3, #1
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_SPI_TransmitReceive+0x26>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e18a      	b.n	8002d74 <HAL_SPI_TransmitReceive+0x33c>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a66:	f7fe ff83 	bl	8001970 <HAL_GetTick>
 8002a6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d00f      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0x70>
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8e:	d107      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x68>
 8002a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d003      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002aa6:	e15b      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_SPI_TransmitReceive+0x82>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_SPI_TransmitReceive+0x82>
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ac0:	e14e      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d003      	beq.n	8002ad6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2205      	movs	r2, #5
 8002ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	887a      	ldrh	r2, [r7, #2]
 8002ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d007      	beq.n	8002b2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b32:	d178      	bne.n	8002c26 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_SPI_TransmitReceive+0x10a>
 8002b3c:	8b7b      	ldrh	r3, [r7, #26]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d166      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	881a      	ldrh	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	1c9a      	adds	r2, r3, #2
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b66:	e053      	b.n	8002c10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d11b      	bne.n	8002bae <HAL_SPI_TransmitReceive+0x176>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d016      	beq.n	8002bae <HAL_SPI_TransmitReceive+0x176>
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d113      	bne.n	8002bae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	881a      	ldrh	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d119      	bne.n	8002bf0 <HAL_SPI_TransmitReceive+0x1b8>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d014      	beq.n	8002bf0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	b292      	uxth	r2, r2
 8002bd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	1c9a      	adds	r2, r3, #2
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bec:	2301      	movs	r3, #1
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bf0:	f7fe febe 	bl	8001970 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d807      	bhi.n	8002c10 <HAL_SPI_TransmitReceive+0x1d8>
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d003      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c0e:	e0a7      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1a6      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x130>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1a1      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x130>
 8002c24:	e07c      	b.n	8002d20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_SPI_TransmitReceive+0x1fc>
 8002c2e:	8b7b      	ldrh	r3, [r7, #26]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d16b      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	7812      	ldrb	r2, [r2, #0]
 8002c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c5a:	e057      	b.n	8002d0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d11c      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x26c>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d017      	beq.n	8002ca4 <HAL_SPI_TransmitReceive+0x26c>
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d114      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	7812      	ldrb	r2, [r2, #0]
 8002c86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d119      	bne.n	8002ce6 <HAL_SPI_TransmitReceive+0x2ae>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d014      	beq.n	8002ce6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ce6:	f7fe fe43 	bl	8001970 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d803      	bhi.n	8002cfe <HAL_SPI_TransmitReceive+0x2c6>
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d102      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x2cc>
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d0a:	e029      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1a2      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x224>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d19d      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f8bf 	bl	8002ea8 <SPI_EndRxTxTransaction>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d3c:	e010      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	e000      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3730      	adds	r7, #48	; 0x30
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d8a:	b2db      	uxtb	r3, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
	...

08002d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002da8:	f7fe fde2 	bl	8001970 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002db8:	f7fe fdda 	bl	8001970 <HAL_GetTick>
 8002dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	015b      	lsls	r3, r3, #5
 8002dc4:	0d1b      	lsrs	r3, r3, #20
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dce:	e054      	b.n	8002e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d050      	beq.n	8002e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dd8:	f7fe fdca 	bl	8001970 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d902      	bls.n	8002dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d13d      	bne.n	8002e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e06:	d111      	bne.n	8002e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e10:	d004      	beq.n	8002e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d107      	bne.n	8002e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e34:	d10f      	bne.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e017      	b.n	8002e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d19b      	bne.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff ff6a 	bl	8002d98 <SPI_WaitFlagStateUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e000      	b.n	8002edc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e03f      	b.n	8002f76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe fbcc 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f905 	bl	8003138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b08a      	sub	sp, #40	; 0x28
 8002f82:	af02      	add	r7, sp, #8
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d17c      	bne.n	8003098 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_UART_Transmit+0x2c>
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e075      	b.n	800309a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Transmit+0x3e>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e06e      	b.n	800309a <HAL_UART_Transmit+0x11c>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2221      	movs	r2, #33	; 0x21
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fd2:	f7fe fccd 	bl	8001970 <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fec:	d108      	bne.n	8003000 <HAL_UART_Transmit+0x82>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e003      	b.n	8003008 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003010:	e02a      	b.n	8003068 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f840 	bl	80030a2 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e036      	b.n	800309a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003040:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	3302      	adds	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e007      	b.n	800305a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1cf      	bne.n	8003012 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2140      	movs	r1, #64	; 0x40
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f810 	bl	80030a2 <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e006      	b.n	800309a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b2:	e02c      	b.n	800310e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	d028      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030c2:	f7fe fc55 	bl	8001970 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d21d      	bcs.n	800310e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e00f      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4013      	ands	r3, r2
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	429a      	cmp	r2, r3
 800312a:	d0c3      	beq.n	80030b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003172:	f023 030c 	bic.w	r3, r3, #12
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	430b      	orrs	r3, r1
 800317e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2c      	ldr	r2, [pc, #176]	; (800324c <UART_SetConfig+0x114>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d103      	bne.n	80031a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031a0:	f7ff fa58 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	e002      	b.n	80031ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031a8:	f7ff fa40 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 80031ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009a      	lsls	r2, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	4a22      	ldr	r2, [pc, #136]	; (8003250 <UART_SetConfig+0x118>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	0119      	lsls	r1, r3, #4
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <UART_SetConfig+0x118>)
 80031e6:	fba3 0302 	umull	r0, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2064      	movs	r0, #100	; 0x64
 80031ee:	fb00 f303 	mul.w	r3, r0, r3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	3332      	adds	r3, #50	; 0x32
 80031f8:	4a15      	ldr	r2, [pc, #84]	; (8003250 <UART_SetConfig+0x118>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003204:	4419      	add	r1, r3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fbb2 f2f3 	udiv	r2, r2, r3
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <UART_SetConfig+0x118>)
 800321e:	fba3 0302 	umull	r0, r3, r3, r2
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2064      	movs	r0, #100	; 0x64
 8003226:	fb00 f303 	mul.w	r3, r0, r3
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	3332      	adds	r3, #50	; 0x32
 8003230:	4a07      	ldr	r2, [pc, #28]	; (8003250 <UART_SetConfig+0x118>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	f003 020f 	and.w	r2, r3, #15
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	440a      	add	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40013800 	.word	0x40013800
 8003250:	51eb851f 	.word	0x51eb851f

08003254 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003258:	4904      	ldr	r1, [pc, #16]	; (800326c <MX_FATFS_Init+0x18>)
 800325a:	4805      	ldr	r0, [pc, #20]	; (8003270 <MX_FATFS_Init+0x1c>)
 800325c:	f003 f936 	bl	80064cc <FATFS_LinkDriver>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <MX_FATFS_Init+0x20>)
 8003266:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000440 	.word	0x20000440
 8003270:	20000010 	.word	0x20000010
 8003274:	2000043c 	.word	0x2000043c

08003278 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800327c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fa68 	bl	8000768 <SD_disk_initialize>
 8003298:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fb44 	bl	800093c <SD_disk_status>
 80032b4:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80032ce:	7bf8      	ldrb	r0, [r7, #15]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	f7fd fb45 	bl	8000964 <SD_disk_read>
 80032da:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80032f4:	7bf8      	ldrb	r0, [r7, #15]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	f7fd fb9c 	bl	8000a38 <SD_disk_write>
 8003300:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	603a      	str	r2, [r7, #0]
 8003314:	71fb      	strb	r3, [r7, #7]
 8003316:	460b      	mov	r3, r1
 8003318:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800331a:	79b9      	ldrb	r1, [r7, #6]
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd fc0d 	bl	8000b40 <SD_disk_ioctl>
 8003326:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	4a08      	ldr	r2, [pc, #32]	; (8003360 <disk_status+0x30>)
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	79fa      	ldrb	r2, [r7, #7]
 8003348:	4905      	ldr	r1, [pc, #20]	; (8003360 <disk_status+0x30>)
 800334a:	440a      	add	r2, r1
 800334c:	7a12      	ldrb	r2, [r2, #8]
 800334e:	4610      	mov	r0, r2
 8003350:	4798      	blx	r3
 8003352:	4603      	mov	r3, r0
 8003354:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000664 	.word	0x20000664

08003364 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <disk_initialize+0x48>)
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d111      	bne.n	80033a0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <disk_initialize+0x48>)
 8003380:	2101      	movs	r1, #1
 8003382:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <disk_initialize+0x48>)
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	79fa      	ldrb	r2, [r7, #7]
 8003392:	4906      	ldr	r1, [pc, #24]	; (80033ac <disk_initialize+0x48>)
 8003394:	440a      	add	r2, r1
 8003396:	7a12      	ldrb	r2, [r2, #8]
 8003398:	4610      	mov	r0, r2
 800339a:	4798      	blx	r3
 800339c:	4603      	mov	r3, r0
 800339e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000664 	.word	0x20000664

080033b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	4603      	mov	r3, r0
 80033be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <disk_read+0x3c>)
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	689c      	ldr	r4, [r3, #8]
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	4a07      	ldr	r2, [pc, #28]	; (80033ec <disk_read+0x3c>)
 80033d0:	4413      	add	r3, r2
 80033d2:	7a18      	ldrb	r0, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	47a0      	blx	r4
 80033dc:	4603      	mov	r3, r0
 80033de:	75fb      	strb	r3, [r7, #23]
  return res;
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000664 	.word	0x20000664

080033f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <disk_write+0x3c>)
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	68dc      	ldr	r4, [r3, #12]
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	4a07      	ldr	r2, [pc, #28]	; (800342c <disk_write+0x3c>)
 8003410:	4413      	add	r3, r2
 8003412:	7a18      	ldrb	r0, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	47a0      	blx	r4
 800341c:	4603      	mov	r3, r0
 800341e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003420:	7dfb      	ldrb	r3, [r7, #23]
}
 8003422:	4618      	mov	r0, r3
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd90      	pop	{r4, r7, pc}
 800342a:	bf00      	nop
 800342c:	20000664 	.word	0x20000664

08003430 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	603a      	str	r2, [r7, #0]
 800343a:	71fb      	strb	r3, [r7, #7]
 800343c:	460b      	mov	r3, r1
 800343e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <disk_ioctl+0x38>)
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	79fa      	ldrb	r2, [r7, #7]
 800344e:	4906      	ldr	r1, [pc, #24]	; (8003468 <disk_ioctl+0x38>)
 8003450:	440a      	add	r2, r1
 8003452:	7a10      	ldrb	r0, [r2, #8]
 8003454:	79b9      	ldrb	r1, [r7, #6]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4798      	blx	r3
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
  return res;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000664 	.word	0x20000664

0800346c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003480:	e007      	b.n	8003492 <mem_cpy+0x26>
		*d++ = *s++;
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	1c53      	adds	r3, r2, #1
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	6179      	str	r1, [r7, #20]
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	1e5a      	subs	r2, r3, #1
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f2      	bne.n	8003482 <mem_cpy+0x16>
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80034b8:	e005      	b.n	80034c6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	617a      	str	r2, [r7, #20]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	1e5a      	subs	r2, r3, #1
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f4      	bne.n	80034ba <mem_set+0x12>
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80034f4:	bf00      	nop
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	1e5a      	subs	r2, r3, #1
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <mem_cmp+0x40>
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	61fa      	str	r2, [r7, #28]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	4619      	mov	r1, r3
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	61ba      	str	r2, [r7, #24]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	1acb      	subs	r3, r1, r3
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ec      	beq.n	80034f6 <mem_cmp+0x1a>
	return r;
 800351c:	697b      	ldr	r3, [r7, #20]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003532:	e002      	b.n	800353a <chk_chr+0x12>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3301      	adds	r3, #1
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <chk_chr+0x26>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	4293      	cmp	r3, r2
 800354c:	d1f2      	bne.n	8003534 <chk_chr+0xc>
	return *str;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	781b      	ldrb	r3, [r3, #0]
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e035      	b.n	80035dc <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 8003570:	492e      	ldr	r1, [pc, #184]	; (800362c <chk_lock+0xd0>)
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d026      	beq.n	80035d2 <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003584:	4929      	ldr	r1, [pc, #164]	; (800362c <chk_lock+0xd0>)
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d11c      	bne.n	80035d6 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 800359c:	4923      	ldr	r1, [pc, #140]	; (800362c <chk_lock+0xd0>)
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3304      	adds	r3, #4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d10f      	bne.n	80035d6 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 80035b6:	491d      	ldr	r1, [pc, #116]	; (800362c <chk_lock+0xd0>)
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3308      	adds	r3, #8
 80035c6:	881a      	ldrh	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d102      	bne.n	80035d6 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 80035d0:	e007      	b.n	80035e2 <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3301      	adds	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d9c6      	bls.n	8003570 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d109      	bne.n	80035fc <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <chk_lock+0x98>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d101      	bne.n	80035f8 <chk_lock+0x9c>
 80035f4:	2300      	movs	r3, #0
 80035f6:	e013      	b.n	8003620 <chk_lock+0xc4>
 80035f8:	2312      	movs	r3, #18
 80035fa:	e011      	b.n	8003620 <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <chk_lock+0xbe>
 8003602:	490a      	ldr	r1, [pc, #40]	; (800362c <chk_lock+0xd0>)
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	330a      	adds	r3, #10
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003618:	d101      	bne.n	800361e <chk_lock+0xc2>
 800361a:	2310      	movs	r3, #16
 800361c:	e000      	b.n	8003620 <chk_lock+0xc4>
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	2000044c 	.word	0x2000044c

08003630 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	e002      	b.n	8003642 <enq_lock+0x12>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3301      	adds	r3, #1
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d809      	bhi.n	800365c <enq_lock+0x2c>
 8003648:	490a      	ldr	r1, [pc, #40]	; (8003674 <enq_lock+0x44>)
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ef      	bne.n	800363c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	bf14      	ite	ne
 8003662:	2301      	movne	r3, #1
 8003664:	2300      	moveq	r3, #0
 8003666:	b2db      	uxtb	r3, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2000044c 	.word	0x2000044c

08003678 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	e028      	b.n	80036da <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 8003688:	4952      	ldr	r1, [pc, #328]	; (80037d4 <inc_lock+0x15c>)
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d119      	bne.n	80036d4 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 80036a0:	494c      	ldr	r1, [pc, #304]	; (80037d4 <inc_lock+0x15c>)
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3304      	adds	r3, #4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d10c      	bne.n	80036d4 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 80036ba:	4946      	ldr	r1, [pc, #280]	; (80037d4 <inc_lock+0x15c>)
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3308      	adds	r3, #8
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d006      	beq.n	80036e2 <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3301      	adds	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d9d3      	bls.n	8003688 <inc_lock+0x10>
 80036e0:	e000      	b.n	80036e4 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 80036e2:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d142      	bne.n	8003770 <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	e002      	b.n	80036f6 <inc_lock+0x7e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3301      	adds	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d809      	bhi.n	8003710 <inc_lock+0x98>
 80036fc:	4935      	ldr	r1, [pc, #212]	; (80037d4 <inc_lock+0x15c>)
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ef      	bne.n	80036f0 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d101      	bne.n	800371a <inc_lock+0xa2>
 8003716:	2300      	movs	r3, #0
 8003718:	e057      	b.n	80037ca <inc_lock+0x152>
		Files[i].fs = dp->fs;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6819      	ldr	r1, [r3, #0]
 800371e:	482d      	ldr	r0, [pc, #180]	; (80037d4 <inc_lock+0x15c>)
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4403      	add	r3, r0
 800372c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6899      	ldr	r1, [r3, #8]
 8003732:	4828      	ldr	r0, [pc, #160]	; (80037d4 <inc_lock+0x15c>)
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4403      	add	r3, r0
 8003740:	3304      	adds	r3, #4
 8003742:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	88d8      	ldrh	r0, [r3, #6]
 8003748:	4922      	ldr	r1, [pc, #136]	; (80037d4 <inc_lock+0x15c>)
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	3308      	adds	r3, #8
 8003758:	4602      	mov	r2, r0
 800375a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800375c:	491d      	ldr	r1, [pc, #116]	; (80037d4 <inc_lock+0x15c>)
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	330a      	adds	r3, #10
 800376c:	2200      	movs	r2, #0
 800376e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00c      	beq.n	8003790 <inc_lock+0x118>
 8003776:	4917      	ldr	r1, [pc, #92]	; (80037d4 <inc_lock+0x15c>)
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	330a      	adds	r3, #10
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <inc_lock+0x118>
 800378c:	2300      	movs	r3, #0
 800378e:	e01c      	b.n	80037ca <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <inc_lock+0x136>
 8003796:	490f      	ldr	r1, [pc, #60]	; (80037d4 <inc_lock+0x15c>)
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	330a      	adds	r3, #10
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	b299      	uxth	r1, r3
 80037ac:	e001      	b.n	80037b2 <inc_lock+0x13a>
 80037ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037b2:	4808      	ldr	r0, [pc, #32]	; (80037d4 <inc_lock+0x15c>)
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4403      	add	r3, r0
 80037c0:	330a      	adds	r3, #10
 80037c2:	460a      	mov	r2, r1
 80037c4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3301      	adds	r3, #1
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	2000044c 	.word	0x2000044c

080037d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d82e      	bhi.n	800384a <dec_lock+0x72>
		n = Files[i].ctr;
 80037ec:	491b      	ldr	r1, [pc, #108]	; (800385c <dec_lock+0x84>)
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	330a      	adds	r3, #10
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003800:	89fb      	ldrh	r3, [r7, #14]
 8003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003806:	d101      	bne.n	800380c <dec_lock+0x34>
 8003808:	2300      	movs	r3, #0
 800380a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800380c:	89fb      	ldrh	r3, [r7, #14]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <dec_lock+0x40>
 8003812:	89fb      	ldrh	r3, [r7, #14]
 8003814:	3b01      	subs	r3, #1
 8003816:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003818:	4910      	ldr	r1, [pc, #64]	; (800385c <dec_lock+0x84>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	330a      	adds	r3, #10
 8003828:	89fa      	ldrh	r2, [r7, #14]
 800382a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800382c:	89fb      	ldrh	r3, [r7, #14]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <dec_lock+0x6c>
 8003832:	490a      	ldr	r1, [pc, #40]	; (800385c <dec_lock+0x84>)
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	737b      	strb	r3, [r7, #13]
 8003848:	e001      	b.n	800384e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800384a:	2302      	movs	r3, #2
 800384c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800384e:	7b7b      	ldrb	r3, [r7, #13]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	2000044c 	.word	0x2000044c

08003860 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e016      	b.n	800389c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800386e:	4910      	ldr	r1, [pc, #64]	; (80038b0 <clear_lock+0x50>)
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	d108      	bne.n	8003896 <clear_lock+0x36>
 8003884:	490a      	ldr	r1, [pc, #40]	; (80038b0 <clear_lock+0x50>)
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3301      	adds	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d9e5      	bls.n	800386e <clear_lock+0xe>
	}
}
 80038a2:	bf00      	nop
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000044c 	.word	0x2000044c

080038b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d038      	beq.n	800393c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80038d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	2301      	movs	r3, #1
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	f7ff fd87 	bl	80033f0 <disk_write>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <sync_window+0x3a>
			res = FR_DISK_ERR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e026      	b.n	800393c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	1ad2      	subs	r2, r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003906:	429a      	cmp	r2, r3
 8003908:	d218      	bcs.n	800393c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	e010      	b.n	8003936 <sync_window+0x82>
					wsect += fs->fsize;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4413      	add	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	2301      	movs	r3, #1
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	f7ff fd60 	bl	80033f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	3b01      	subs	r3, #1
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d8eb      	bhi.n	8003914 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d01b      	beq.n	8003998 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ffa7 	bl	80038b4 <sync_window>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d113      	bne.n	8003998 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	2301      	movs	r3, #1
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	f7ff fd18 	bl	80033b0 <disk_read>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003986:	f04f 33ff 	mov.w	r3, #4294967295
 800398a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ff82 	bl	80038b4 <sync_window>
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 809b 	bne.w	8003af2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	f040 8088 	bne.w	8003ad8 <sync_fs+0x136>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	f040 8082 	bne.w	8003ad8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039da:	2100      	movs	r1, #0
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fd63 	bl	80034a8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2255      	movs	r2, #85	; 0x55
 80039e6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	22aa      	movs	r2, #170	; 0xaa
 80039ee:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2252      	movs	r2, #82	; 0x52
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2252      	movs	r2, #82	; 0x52
 80039fc:	705a      	strb	r2, [r3, #1]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2261      	movs	r2, #97	; 0x61
 8003a02:	709a      	strb	r2, [r3, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2241      	movs	r2, #65	; 0x41
 8003a08:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2272      	movs	r2, #114	; 0x72
 8003a0e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2272      	movs	r2, #114	; 0x72
 8003a16:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2241      	movs	r2, #65	; 0x41
 8003a1e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2261      	movs	r2, #97	; 0x61
 8003a26:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003a52:	0c1b      	lsrs	r3, r3, #16
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003a62:	0e1b      	lsrs	r3, r3, #24
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003aa4:	0e1b      	lsrs	r3, r3, #24
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8003aca:	2301      	movs	r3, #1
 8003acc:	f7ff fc90 	bl	80033f0 <disk_write>
			fs->fsi_flag = 0;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fca4 	bl	8003430 <disk_ioctl>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3b02      	subs	r3, #2
 8003b0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003b12:	3b02      	subs	r3, #2
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d301      	bcc.n	8003b1e <clust2sect+0x22>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e00a      	b.n	8003b34 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003b24:	461a      	mov	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	fb03 f202 	mul.w	r2, r3, r2
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003b32:	4413      	add	r3, r2
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d905      	bls.n	8003b5a <get_fat+0x1c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <get_fat+0x22>
		val = 1;	/* Internal error */
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e0a3      	b.n	8003ca8 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d068      	beq.n	8003c42 <get_fat+0x104>
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	f300 808f 	bgt.w	8003c94 <get_fat+0x156>
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d002      	beq.n	8003b80 <get_fat+0x42>
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d040      	beq.n	8003c00 <get_fat+0xc2>
 8003b7e:	e089      	b.n	8003c94 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	0a5b      	lsrs	r3, r3, #9
 8003b98:	4413      	add	r3, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fed2 	bl	8003946 <move_window>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d178      	bne.n	8003c9a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	60fa      	str	r2, [r7, #12]
 8003bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	5cd3      	ldrb	r3, [r2, r3]
 8003bb6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	0a5b      	lsrs	r3, r3, #9
 8003bc2:	4413      	add	r3, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff febd 	bl	8003946 <move_window>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d165      	bne.n	8003c9e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	5cd3      	ldrb	r3, [r2, r3]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	461a      	mov	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <get_fat+0xb8>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	e002      	b.n	8003bfc <get_fat+0xbe>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	617b      	str	r3, [r7, #20]
			break;
 8003bfe:	e053      	b.n	8003ca8 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	4413      	add	r3, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fe99 	bl	8003946 <move_window>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d143      	bne.n	8003ca2 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	b21a      	sxth	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b21b      	sxth	r3, r3
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	b21b      	sxth	r3, r3
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	617b      	str	r3, [r7, #20]
			break;
 8003c40:	e032      	b.n	8003ca8 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	09db      	lsrs	r3, r3, #7
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff fe78 	bl	8003946 <move_window>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d124      	bne.n	8003ca6 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	3303      	adds	r3, #3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	061a      	lsls	r2, r3, #24
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3302      	adds	r3, #2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	3201      	adds	r2, #1
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	0212      	lsls	r2, r2, #8
 8003c84:	4313      	orrs	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	7812      	ldrb	r2, [r2, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c90:	617b      	str	r3, [r7, #20]
			break;
 8003c92:	e009      	b.n	8003ca8 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e006      	b.n	8003ca8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c9a:	bf00      	nop
 8003c9c:	e004      	b.n	8003ca8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c9e:	bf00      	nop
 8003ca0:	e002      	b.n	8003ca8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ca6:	bf00      	nop
		}
	}

	return val;
 8003ca8:	697b      	ldr	r3, [r7, #20]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b088      	sub	sp, #32
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d905      	bls.n	8003cd0 <put_fat+0x1e>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d302      	bcc.n	8003cd6 <put_fat+0x24>
		res = FR_INT_ERR;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e0f6      	b.n	8003ec4 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	f000 809e 	beq.w	8003e1e <put_fat+0x16c>
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	f300 80e4 	bgt.w	8003eb0 <put_fat+0x1fe>
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d002      	beq.n	8003cf2 <put_fat+0x40>
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d06f      	beq.n	8003dd0 <put_fat+0x11e>
 8003cf0:	e0de      	b.n	8003eb0 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	0a5b      	lsrs	r3, r3, #9
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff fe19 	bl	8003946 <move_window>
 8003d14:	4603      	mov	r3, r0
 8003d16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d18:	7ffb      	ldrb	r3, [r7, #31]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f040 80cb 	bne.w	8003eb6 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	617a      	str	r2, [r7, #20]
 8003d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <put_fat+0xa4>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	b25b      	sxtb	r3, r3
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	b25a      	sxtb	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	b25b      	sxtb	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e001      	b.n	8003d5a <put_fat+0xa8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	0a5b      	lsrs	r3, r3, #9
 8003d70:	4413      	add	r3, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7ff fde6 	bl	8003946 <move_window>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d7e:	7ffb      	ldrb	r3, [r7, #31]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f040 809a 	bne.w	8003eba <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <put_fat+0xf2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e00e      	b.n	8003dc2 <put_fat+0x110>
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	f023 030f 	bic.w	r3, r3, #15
 8003dae:	b25a      	sxtb	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003dce:	e079      	b.n	8003ec4 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	4413      	add	r3, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff fdb1 	bl	8003946 <move_window>
 8003de4:	4603      	mov	r3, r0
 8003de6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d167      	bne.n	8003ebe <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	701a      	strb	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003e1c:	e052      	b.n	8003ec4 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	09db      	lsrs	r3, r3, #7
 8003e28:	4413      	add	r3, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff fd8a 	bl	8003946 <move_window>
 8003e32:	4603      	mov	r3, r0
 8003e34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e36:	7ffb      	ldrb	r3, [r7, #31]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d142      	bne.n	8003ec2 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	061a      	lsls	r2, r3, #24
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	3302      	adds	r3, #2
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	3201      	adds	r2, #1
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	0212      	lsls	r2, r2, #8
 8003e64:	4313      	orrs	r3, r2
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	0c1a      	lsrs	r2, r3, #16
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	3302      	adds	r3, #2
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0e1a      	lsrs	r2, r3, #24
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	3303      	adds	r3, #3
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003eae:	e009      	b.n	8003ec4 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e006      	b.n	8003ec4 <put_fat+0x212>
			if (res != FR_OK) break;
 8003eb6:	bf00      	nop
 8003eb8:	e004      	b.n	8003ec4 <put_fat+0x212>
			if (res != FR_OK) break;
 8003eba:	bf00      	nop
 8003ebc:	e002      	b.n	8003ec4 <put_fat+0x212>
			if (res != FR_OK) break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <put_fat+0x212>
			if (res != FR_OK) break;
 8003ec2:	bf00      	nop
		}
	}

	return res;
 8003ec4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d905      	bls.n	8003eea <remove_chain+0x1c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <remove_chain+0x22>
		res = FR_INT_ERR;
 8003eea:	2302      	movs	r3, #2
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	e043      	b.n	8003f78 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003ef4:	e036      	b.n	8003f64 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003ef6:	6839      	ldr	r1, [r7, #0]
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fe20 	bl	8003b3e <get_fat>
 8003efe:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d035      	beq.n	8003f72 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d102      	bne.n	8003f12 <remove_chain+0x44>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	e032      	b.n	8003f78 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d102      	bne.n	8003f20 <remove_chain+0x52>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
 8003f1e:	e02b      	b.n	8003f78 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003f20:	2200      	movs	r2, #0
 8003f22:	6839      	ldr	r1, [r7, #0]
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff fec4 	bl	8003cb2 <put_fat>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d120      	bne.n	8003f76 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3e:	d00f      	beq.n	8003f60 <remove_chain+0x92>
				fs->free_clust++;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d3c2      	bcc.n	8003ef6 <remove_chain+0x28>
 8003f70:	e002      	b.n	8003f78 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8003f76:	bf00      	nop
		}
	}

	return res;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b086      	sub	sp, #24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003f98:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <create_chain+0x2a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d31c      	bcc.n	8003fe6 <create_chain+0x64>
 8003fac:	2301      	movs	r3, #1
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	e019      	b.n	8003fe6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fdc2 	bl	8003b3e <get_fat>
 8003fba:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d801      	bhi.n	8003fc6 <create_chain+0x44>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e076      	b.n	80040b4 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d101      	bne.n	8003fd2 <create_chain+0x50>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	e070      	b.n	80040b4 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d201      	bcs.n	8003fe2 <create_chain+0x60>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	e068      	b.n	80040b4 <create_chain+0x132>
		scl = clst;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	3301      	adds	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d307      	bcc.n	800400c <create_chain+0x8a>
			ncl = 2;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	429a      	cmp	r2, r3
 8004006:	d901      	bls.n	800400c <create_chain+0x8a>
 8004008:	2300      	movs	r3, #0
 800400a:	e053      	b.n	80040b4 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800400c:	6979      	ldr	r1, [r7, #20]
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff fd95 	bl	8003b3e <get_fat>
 8004014:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d002      	beq.n	800402a <create_chain+0xa8>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <create_chain+0xac>
			return cs;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	e042      	b.n	80040b4 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	d1d9      	bne.n	8003fea <create_chain+0x68>
 8004036:	2300      	movs	r3, #0
 8004038:	e03c      	b.n	80040b4 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800403a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800403c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004040:	6979      	ldr	r1, [r7, #20]
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fe35 	bl	8003cb2 <put_fat>
 8004048:	4603      	mov	r3, r0
 800404a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <create_chain+0xe4>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	6839      	ldr	r1, [r7, #0]
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fe28 	bl	8003cb2 <put_fat>
 8004062:	4603      	mov	r3, r0
 8004064:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d11a      	bne.n	80040a2 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d018      	beq.n	80040b2 <create_chain+0x130>
			fs->free_clust--;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	b2da      	uxtb	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80040a0:	e007      	b.n	80040b2 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d102      	bne.n	80040ae <create_chain+0x12c>
 80040a8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ac:	e000      	b.n	80040b0 <create_chain+0x12e>
 80040ae:	2301      	movs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80040b2:	697b      	ldr	r3, [r7, #20]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	3304      	adds	r3, #4
 80040cc:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	0a5b      	lsrs	r3, r3, #9
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80040da:	fbb3 f3f2 	udiv	r3, r3, r2
 80040de:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	613a      	str	r2, [r7, #16]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <clmt_clust+0x38>
 80040f0:	2300      	movs	r3, #0
 80040f2:	e010      	b.n	8004116 <clmt_clust+0x5a>
		if (cl < ncl) break;	/* In this fragment? */
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d307      	bcc.n	800410c <clmt_clust+0x50>
		cl -= ncl; tbl++;		/* Next fragment */
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	3304      	adds	r3, #4
 8004108:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800410a:	e7e9      	b.n	80040e0 <clmt_clust+0x24>
		if (cl < ncl) break;	/* In this fragment? */
 800410c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	4413      	add	r3, r2
}
 8004116:	4618      	mov	r0, r3
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d006      	beq.n	800414c <dir_sdi+0x2c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	429a      	cmp	r2, r3
 800414a:	d301      	bcc.n	8004150 <dir_sdi+0x30>
		return FR_INT_ERR;
 800414c:	2302      	movs	r3, #2
 800414e:	e068      	b.n	8004222 <dir_sdi+0x102>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <dir_sdi+0x4c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800415e:	2b03      	cmp	r3, #3
 8004160:	d104      	bne.n	800416c <dir_sdi+0x4c>
		clst = dp->fs->dirbase;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800416a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10f      	bne.n	8004192 <dir_sdi+0x72>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800417a:	461a      	mov	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4293      	cmp	r3, r2
 8004180:	d301      	bcc.n	8004186 <dir_sdi+0x66>
			return FR_INT_ERR;
 8004182:	2302      	movs	r3, #2
 8004184:	e04d      	b.n	8004222 <dir_sdi+0x102>
		sect = dp->fs->dirbase;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	e02e      	b.n	80041f0 <dir_sdi+0xd0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800419e:	e01c      	b.n	80041da <dir_sdi+0xba>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6979      	ldr	r1, [r7, #20]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fcc9 	bl	8003b3e <get_fat>
 80041ac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b4:	d101      	bne.n	80041ba <dir_sdi+0x9a>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e033      	b.n	8004222 <dir_sdi+0x102>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d906      	bls.n	80041ce <dir_sdi+0xae>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d301      	bcc.n	80041d2 <dir_sdi+0xb2>
				return FR_INT_ERR;
 80041ce:	2302      	movs	r3, #2
 80041d0:	e027      	b.n	8004222 <dir_sdi+0x102>
			idx -= ic;
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d2de      	bcs.n	80041a0 <dir_sdi+0x80>
		}
		sect = clust2sect(dp->fs, clst);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6979      	ldr	r1, [r7, #20]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fc87 	bl	8003afc <clust2sect>
 80041ee:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <dir_sdi+0xe0>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e010      	b.n	8004222 <dir_sdi+0x102>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	091a      	lsrs	r2, r3, #4
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	441a      	add	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	015b      	lsls	r3, r3, #5
 800421a:	441a      	add	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800422a:	b590      	push	{r4, r7, lr}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	88db      	ldrh	r3, [r3, #6]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <dir_next+0x22>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <dir_next+0x26>
		return FR_NO_FILE;
 800424c:	2304      	movs	r3, #4
 800424e:	e0c3      	b.n	80043d8 <dir_next+0x1ae>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 80af 	bne.w	80043ba <dir_next+0x190>
		dp->sect++;					/* Next sector */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <dir_next+0x5a>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4293      	cmp	r3, r2
 800427c:	f0c0 809d 	bcc.w	80043ba <dir_next+0x190>
				return FR_NO_FILE;
 8004280:	2304      	movs	r3, #4
 8004282:	e0a9      	b.n	80043d8 <dir_next+0x1ae>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004290:	3a01      	subs	r2, #1
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	f040 8090 	bne.w	80043ba <dir_next+0x190>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7ff fc4a 	bl	8003b3e <get_fat>
 80042aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d801      	bhi.n	80042b6 <dir_next+0x8c>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e090      	b.n	80043d8 <dir_next+0x1ae>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d101      	bne.n	80042c2 <dir_next+0x98>
 80042be:	2301      	movs	r3, #1
 80042c0:	e08a      	b.n	80043d8 <dir_next+0x1ae>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d368      	bcc.n	80043a2 <dir_next+0x178>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <dir_next+0xb0>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e07e      	b.n	80043d8 <dir_next+0x1ae>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f7ff fe4c 	bl	8003f82 <create_chain>
 80042ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <dir_next+0xcc>
 80042f2:	2307      	movs	r3, #7
 80042f4:	e070      	b.n	80043d8 <dir_next+0x1ae>
					if (clst == 1) return FR_INT_ERR;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <dir_next+0xd6>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e06b      	b.n	80043d8 <dir_next+0x1ae>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d101      	bne.n	800430c <dir_next+0xe2>
 8004308:	2301      	movs	r3, #1
 800430a:	e065      	b.n	80043d8 <dir_next+0x1ae>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff facf 	bl	80038b4 <sync_window>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <dir_next+0xf6>
 800431c:	2301      	movs	r3, #1
 800431e:	e05b      	b.n	80043d8 <dir_next+0x1ae>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f8bc 	bl	80034a8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681c      	ldr	r4, [r3, #0]
 8004338:	6979      	ldr	r1, [r7, #20]
 800433a:	4610      	mov	r0, r2
 800433c:	f7ff fbde 	bl	8003afc <clust2sect>
 8004340:	4603      	mov	r3, r0
 8004342:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e018      	b.n	800437e <dir_next+0x154>
						dp->fs->wflag = 1;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff faaa 	bl	80038b4 <sync_window>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <dir_next+0x140>
 8004366:	2301      	movs	r3, #1
 8004368:	e036      	b.n	80043d8 <dir_next+0x1ae>
						dp->fs->winsect++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004372:	3201      	adds	r2, #1
 8004374:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	3301      	adds	r3, #1
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004386:	461a      	mov	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4293      	cmp	r3, r2
 800438c:	d3de      	bcc.n	800434c <dir_next+0x122>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	1a8a      	subs	r2, r1, r2
 800439e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6979      	ldr	r1, [r7, #20]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fba4 	bl	8003afc <clust2sect>
 80043b4:	4602      	mov	r2, r0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	b29a      	uxth	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	015b      	lsls	r3, r3, #5
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd90      	pop	{r4, r7, pc}

080043e0 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80043ea:	2100      	movs	r1, #0
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fe97 	bl	8004120 <dir_sdi>
 80043f2:	4603      	mov	r3, r0
 80043f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d12d      	bne.n	8004458 <dir_alloc+0x78>
		n = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f7ff fa9b 	bl	8003946 <move_window>
 8004410:	4603      	mov	r3, r0
 8004412:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d11d      	bne.n	8004456 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2be5      	cmp	r3, #229	; 0xe5
 8004422:	d004      	beq.n	800442e <dir_alloc+0x4e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d107      	bne.n	800443e <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3301      	adds	r3, #1
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d102      	bne.n	8004442 <dir_alloc+0x62>
 800443c:	e00c      	b.n	8004458 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004442:	2101      	movs	r1, #1
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fef0 	bl	800422a <dir_next>
 800444a:	4603      	mov	r3, r0
 800444c:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0d5      	beq.n	8004400 <dir_alloc+0x20>
 8004454:	e000      	b.n	8004458 <dir_alloc+0x78>
			if (res != FR_OK) break;
 8004456:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b04      	cmp	r3, #4
 800445c:	d101      	bne.n	8004462 <dir_alloc+0x82>
 800445e:	2307      	movs	r3, #7
 8004460:	73fb      	strb	r3, [r7, #15]
	return res;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	331b      	adds	r3, #27
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	b21a      	sxth	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	331a      	adds	r3, #26
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b21b      	sxth	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b21b      	sxth	r3, r3
 800448c:	b29b      	uxth	r3, r3
 800448e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004496:	2b03      	cmp	r3, #3
 8004498:	d10f      	bne.n	80044ba <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	3315      	adds	r3, #21
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	b21a      	sxth	r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b21b      	sxth	r3, r3
 80044ac:	4313      	orrs	r3, r2
 80044ae:	b21b      	sxth	r3, r3
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

	return cl;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	331a      	adds	r3, #26
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	331b      	adds	r3, #27
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	0c1a      	lsrs	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3314      	adds	r3, #20
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3315      	adds	r3, #21
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
	...

08004514 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004526:	1e5a      	subs	r2, r3, #1
 8004528:	4613      	mov	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	2301      	movs	r3, #1
 800453a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800453c:	4a2b      	ldr	r2, [pc, #172]	; (80045ec <cmp_lfn+0xd8>)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4413      	add	r3, r2
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	3301      	adds	r3, #1
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	4413      	add	r3, r2
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	b21a      	sxth	r2, r3
 8004550:	4926      	ldr	r1, [pc, #152]	; (80045ec <cmp_lfn+0xd8>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	440b      	add	r3, r1
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	440b      	add	r3, r1
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	b21b      	sxth	r3, r3
 8004562:	4313      	orrs	r3, r2
 8004564:	b21b      	sxth	r3, r3
 8004566:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004568:	89fb      	ldrh	r3, [r7, #14]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d019      	beq.n	80045a2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800456e:	89bb      	ldrh	r3, [r7, #12]
 8004570:	4618      	mov	r0, r3
 8004572:	f001 fff5 	bl	8006560 <ff_wtoupper>
 8004576:	4603      	mov	r3, r0
 8004578:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2bfe      	cmp	r3, #254	; 0xfe
 800457e:	d80e      	bhi.n	800459e <cmp_lfn+0x8a>
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	617a      	str	r2, [r7, #20]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f001 ffe6 	bl	8006560 <ff_wtoupper>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	89fb      	ldrh	r3, [r7, #14]
 800459a:	4293      	cmp	r3, r2
 800459c:	d008      	beq.n	80045b0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800459e:	2300      	movs	r3, #0
 80045a0:	e01f      	b.n	80045e2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80045a2:	89bb      	ldrh	r3, [r7, #12]
 80045a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d001      	beq.n	80045b0 <cmp_lfn+0x9c>
 80045ac:	2300      	movs	r3, #0
 80045ae:	e018      	b.n	80045e2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	3301      	adds	r3, #1
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b0c      	cmp	r3, #12
 80045ba:	d9bf      	bls.n	800453c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00b      	beq.n	80045e0 <cmp_lfn+0xcc>
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <cmp_lfn+0xcc>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <cmp_lfn+0xcc>
		return 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80045e0:	2301      	movs	r3, #1
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	08007140 	.word	0x08007140

080045f0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	460b      	mov	r3, r1
 8004600:	71fb      	strb	r3, [r7, #7]
 8004602:	4613      	mov	r3, r2
 8004604:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	330d      	adds	r3, #13
 800460a:	79ba      	ldrb	r2, [r7, #6]
 800460c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	330b      	adds	r3, #11
 8004612:	220f      	movs	r2, #15
 8004614:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	330c      	adds	r3, #12
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	331a      	adds	r3, #26
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	331b      	adds	r3, #27
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	1e5a      	subs	r2, r3, #1
 8004632:	4613      	mov	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	82fb      	strh	r3, [r7, #22]
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004646:	8afb      	ldrh	r3, [r7, #22]
 8004648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <fit_lfn+0x70>
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	61fa      	str	r2, [r7, #28]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <fit_lfn+0xe4>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4413      	add	r3, r2
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4413      	add	r3, r2
 800466e:	8afa      	ldrh	r2, [r7, #22]
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	8afb      	ldrh	r3, [r7, #22]
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	b299      	uxth	r1, r3
 800467a:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <fit_lfn+0xe4>)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4413      	add	r3, r2
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	4413      	add	r3, r2
 8004688:	b2ca      	uxtb	r2, r1
 800468a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800468c:	8afb      	ldrh	r3, [r7, #22]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <fit_lfn+0xa8>
 8004692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004696:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	3301      	adds	r3, #1
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d9d0      	bls.n	8004646 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80046a4:	8afb      	ldrh	r3, [r7, #22]
 80046a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d006      	beq.n	80046bc <fit_lfn+0xcc>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <fit_lfn+0xd4>
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	79fa      	ldrb	r2, [r7, #7]
 80046c8:	701a      	strb	r2, [r3, #0]
}
 80046ca:	bf00      	nop
 80046cc:	3724      	adds	r7, #36	; 0x24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	08007140 	.word	0x08007140

080046d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08c      	sub	sp, #48	; 0x30
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80046e6:	220b      	movs	r2, #11
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7fe febe 	bl	800346c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d92b      	bls.n	800474e <gen_numname+0x76>
		sr = seq;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80046fa:	e022      	b.n	8004742 <gen_numname+0x6a>
			wc = *lfn++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004706:	2300      	movs	r3, #0
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
 800470a:	e017      	b.n	800473c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005a      	lsls	r2, r3, #1
 8004710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800471a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <gen_numname+0x5e>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004730:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004734:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	3301      	adds	r3, #1
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	2b0f      	cmp	r3, #15
 8004740:	d9e4      	bls.n	800470c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1d8      	bne.n	80046fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800474e:	2307      	movs	r3, #7
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	b2db      	uxtb	r3, r3
 800475c:	3330      	adds	r3, #48	; 0x30
 800475e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004766:	2b39      	cmp	r3, #57	; 0x39
 8004768:	d904      	bls.n	8004774 <gen_numname+0x9c>
 800476a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800476e:	3307      	adds	r3, #7
 8004770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	1e5a      	subs	r2, r3, #1
 8004778:	62ba      	str	r2, [r7, #40]	; 0x28
 800477a:	3330      	adds	r3, #48	; 0x30
 800477c:	443b      	add	r3, r7
 800477e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004782:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1df      	bne.n	8004752 <gen_numname+0x7a>
	ns[i] = '~';
 8004792:	f107 0214 	add.w	r2, r7, #20
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	4413      	add	r3, r2
 800479a:	227e      	movs	r2, #126	; 0x7e
 800479c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
 80047a2:	e002      	b.n	80047aa <gen_numname+0xd2>
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	3301      	adds	r3, #1
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d205      	bcs.n	80047be <gen_numname+0xe6>
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	4413      	add	r3, r2
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d1f2      	bne.n	80047a4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	2b07      	cmp	r3, #7
 80047c2:	d807      	bhi.n	80047d4 <gen_numname+0xfc>
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80047ca:	3330      	adds	r3, #48	; 0x30
 80047cc:	443b      	add	r3, r7
 80047ce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80047d2:	e000      	b.n	80047d6 <gen_numname+0xfe>
 80047d4:	2120      	movs	r1, #32
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	627a      	str	r2, [r7, #36]	; 0x24
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	460a      	mov	r2, r1
 80047e2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	2b07      	cmp	r3, #7
 80047e8:	d9e9      	bls.n	80047be <gen_numname+0xe6>
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	3730      	adds	r7, #48	; 0x30
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004800:	230b      	movs	r3, #11
 8004802:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	0852      	lsrs	r2, r2, #1
 800480a:	01db      	lsls	r3, r3, #7
 800480c:	4313      	orrs	r3, r2
 800480e:	b2da      	uxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	1c59      	adds	r1, r3, #1
 8004814:	6079      	str	r1, [r7, #4]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4413      	add	r3, r2
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	3b01      	subs	r3, #1
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ed      	bne.n	8004804 <sum_sfn+0x10>
	return sum;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr

08004834 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800483c:	2100      	movs	r1, #0
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff fc6e 	bl	8004120 <dir_sdi>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004848:	7dfb      	ldrb	r3, [r7, #23]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <dir_find+0x1e>
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	e0a0      	b.n	8004994 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004852:	23ff      	movs	r3, #255	; 0xff
 8004854:	753b      	strb	r3, [r7, #20]
 8004856:	7d3b      	ldrb	r3, [r7, #20]
 8004858:	757b      	strb	r3, [r7, #21]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004860:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f7ff f86a 	bl	8003946 <move_window>
 8004872:	4603      	mov	r3, r0
 8004874:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004876:	7dfb      	ldrb	r3, [r7, #23]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f040 8085 	bne.w	8004988 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800488a:	7dbb      	ldrb	r3, [r7, #22]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <dir_find+0x62>
 8004890:	2304      	movs	r3, #4
 8004892:	75fb      	strb	r3, [r7, #23]
 8004894:	e07d      	b.n	8004992 <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	330b      	adds	r3, #11
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a0:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80048a2:	7dbb      	ldrb	r3, [r7, #22]
 80048a4:	2be5      	cmp	r3, #229	; 0xe5
 80048a6:	d007      	beq.n	80048b8 <dir_find+0x84>
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <dir_find+0x92>
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b0f      	cmp	r3, #15
 80048b6:	d006      	beq.n	80048c6 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80048b8:	23ff      	movs	r3, #255	; 0xff
 80048ba:	757b      	strb	r3, [r7, #21]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048c2:	849a      	strh	r2, [r3, #36]	; 0x24
 80048c4:	e055      	b.n	8004972 <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b0f      	cmp	r3, #15
 80048ca:	d12f      	bne.n	800492c <dir_find+0xf8>
				if (dp->lfn) {
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d04e      	beq.n	8004972 <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80048d4:	7dbb      	ldrb	r3, [r7, #22]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00c      	beq.n	80048f8 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	7b5b      	ldrb	r3, [r3, #13]
 80048e2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80048e4:	7dbb      	ldrb	r3, [r7, #22]
 80048e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ea:	75bb      	strb	r3, [r7, #22]
 80048ec:	7dbb      	ldrb	r3, [r7, #22]
 80048ee:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	88da      	ldrh	r2, [r3, #6]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80048f8:	7dba      	ldrb	r2, [r7, #22]
 80048fa:	7d7b      	ldrb	r3, [r7, #21]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d112      	bne.n	8004926 <dir_find+0xf2>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	330d      	adds	r3, #13
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	7d3a      	ldrb	r2, [r7, #20]
 8004908:	429a      	cmp	r2, r3
 800490a:	d10c      	bne.n	8004926 <dir_find+0xf2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	6939      	ldr	r1, [r7, #16]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fdfe 	bl	8004514 <cmp_lfn>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <dir_find+0xf2>
 800491e:	7d7b      	ldrb	r3, [r7, #21]
 8004920:	3b01      	subs	r3, #1
 8004922:	b2db      	uxtb	r3, r3
 8004924:	e000      	b.n	8004928 <dir_find+0xf4>
 8004926:	23ff      	movs	r3, #255	; 0xff
 8004928:	757b      	strb	r3, [r7, #21]
 800492a:	e022      	b.n	8004972 <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800492c:	7d7b      	ldrb	r3, [r7, #21]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d107      	bne.n	8004942 <dir_find+0x10e>
 8004932:	6938      	ldr	r0, [r7, #16]
 8004934:	f7ff ff5e 	bl	80047f4 <sum_sfn>
 8004938:	4603      	mov	r3, r0
 800493a:	461a      	mov	r2, r3
 800493c:	7d3b      	ldrb	r3, [r7, #20]
 800493e:	4293      	cmp	r3, r2
 8004940:	d024      	beq.n	800498c <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	330b      	adds	r3, #11
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <dir_find+0x132>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	220b      	movs	r2, #11
 8004958:	4619      	mov	r1, r3
 800495a:	6938      	ldr	r0, [r7, #16]
 800495c:	f7fe fdbe 	bl	80034dc <mem_cmp>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d014      	beq.n	8004990 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004966:	23ff      	movs	r3, #255	; 0xff
 8004968:	757b      	strb	r3, [r7, #21]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004970:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004972:	2100      	movs	r1, #0
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff fc58 	bl	800422a <dir_next>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800497e:	7dfb      	ldrb	r3, [r7, #23]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f43f af6e 	beq.w	8004862 <dir_find+0x2e>
 8004986:	e004      	b.n	8004992 <dir_find+0x15e>
		if (res != FR_OK) break;
 8004988:	bf00      	nop
 800498a:	e002      	b.n	8004992 <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004990:	bf00      	nop

	return res;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08c      	sub	sp, #48	; 0x30
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	623b      	str	r3, [r7, #32]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80049b0:	f107 030c 	add.w	r3, r7, #12
 80049b4:	220c      	movs	r2, #12
 80049b6:	6a39      	ldr	r1, [r7, #32]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe fd57 	bl	800346c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d035      	beq.n	8004a34 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	330b      	adds	r3, #11
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 80049d6:	2301      	movs	r3, #1
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049da:	e013      	b.n	8004a04 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80049dc:	f107 010c 	add.w	r1, r7, #12
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	6a38      	ldr	r0, [r7, #32]
 80049e6:	f7ff fe77 	bl	80046d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ff22 	bl	8004834 <dir_find>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80049f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	3301      	adds	r3, #1
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	2b63      	cmp	r3, #99	; 0x63
 8004a08:	d9e8      	bls.n	80049dc <dir_register+0x40>
 8004a0a:	e000      	b.n	8004a0e <dir_register+0x72>
			if (res != FR_OK) break;
 8004a0c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	2b64      	cmp	r3, #100	; 0x64
 8004a12:	d101      	bne.n	8004a18 <dir_register+0x7c>
 8004a14:	2307      	movs	r3, #7
 8004a16:	e0b5      	b.n	8004b84 <dir_register+0x1e8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d002      	beq.n	8004a26 <dir_register+0x8a>
 8004a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a24:	e0ae      	b.n	8004b84 <dir_register+0x1e8>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	330b      	adds	r3, #11
 8004a2a:	7dfa      	ldrb	r2, [r7, #23]
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d014      	beq.n	8004a68 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a42:	e002      	b.n	8004a4a <dir_register+0xae>
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	3301      	adds	r3, #1
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f5      	bne.n	8004a44 <dir_register+0xa8>
		nent = (n + 25) / 13;
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	3319      	adds	r3, #25
 8004a5c:	4a4b      	ldr	r2, [pc, #300]	; (8004b8c <dir_register+0x1f0>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	e001      	b.n	8004a6c <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fcb6 	bl	80043e0 <dir_alloc>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d14c      	bne.n	8004b1c <dir_register+0x180>
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	3b01      	subs	r3, #1
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d046      	beq.n	8004b1c <dir_register+0x180>
		res = dir_sdi(dp, dp->index - nent);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	88db      	ldrh	r3, [r3, #6]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff fb40 	bl	8004120 <dir_sdi>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d136      	bne.n	8004b1c <dir_register+0x180>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fe9e 	bl	80047f4 <sum_sfn>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f7fe ff3d 	bl	8003946 <move_window>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11f      	bne.n	8004b1a <dir_register+0x17e>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a18      	ldr	r0, [r3, #32]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6959      	ldr	r1, [r3, #20]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	7efb      	ldrb	r3, [r7, #27]
 8004ae8:	f7ff fd82 	bl	80045f0 <fit_lfn>
				dp->fs->wflag = 1;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8004af6:	2100      	movs	r1, #0
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fb96 	bl	800422a <dir_next>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d107      	bne.n	8004b1c <dir_register+0x180>
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1d1      	bne.n	8004abc <dir_register+0x120>
 8004b18:	e000      	b.n	8004b1c <dir_register+0x180>
				if (res != FR_OK) break;
 8004b1a:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d12d      	bne.n	8004b80 <dir_register+0x1e4>
		res = move_window(dp->fs, dp->sect);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f7fe ff09 	bl	8003946 <move_window>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11e      	bne.n	8004b80 <dir_register+0x1e4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	2220      	movs	r2, #32
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe fcac 	bl	80034a8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6958      	ldr	r0, [r3, #20]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	220b      	movs	r2, #11
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f7fe fc86 	bl	800346c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	330b      	adds	r3, #11
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	f002 0218 	and.w	r2, r2, #24
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8004b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3730      	adds	r7, #48	; 0x30
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	4ec4ec4f 	.word	0x4ec4ec4f

08004b90 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	e002      	b.n	8004ba8 <create_name+0x18>
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b2f      	cmp	r3, #47	; 0x2f
 8004bae:	d0f8      	beq.n	8004ba2 <create_name+0x12>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8004bb6:	d0f4      	beq.n	8004ba2 <create_name+0x12>
	lfn = dp->lfn;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	61ba      	str	r2, [r7, #24]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bd6:	2b1f      	cmp	r3, #31
 8004bd8:	d92f      	bls.n	8004c3a <create_name+0xaa>
 8004bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8004bde:	d02c      	beq.n	8004c3a <create_name+0xaa>
 8004be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004be2:	2b5c      	cmp	r3, #92	; 0x5c
 8004be4:	d029      	beq.n	8004c3a <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2bfe      	cmp	r3, #254	; 0xfe
 8004bea:	d901      	bls.n	8004bf0 <create_name+0x60>
			return FR_INVALID_NAME;
 8004bec:	2306      	movs	r3, #6
 8004bee:	e17c      	b.n	8004eea <create_name+0x35a>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fc76 	bl	80064ec <ff_convert>
 8004c00:	4603      	mov	r3, r0
 8004c02:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <create_name+0x7e>
 8004c0a:	2306      	movs	r3, #6
 8004c0c:	e16d      	b.n	8004eea <create_name+0x35a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c10:	2b7f      	cmp	r3, #127	; 0x7f
 8004c12:	d809      	bhi.n	8004c28 <create_name+0x98>
 8004c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c16:	4619      	mov	r1, r3
 8004c18:	488c      	ldr	r0, [pc, #560]	; (8004e4c <create_name+0x2bc>)
 8004c1a:	f7fe fc85 	bl	8003528 <chk_chr>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <create_name+0x98>
			return FR_INVALID_NAME;
 8004c24:	2306      	movs	r3, #6
 8004c26:	e160      	b.n	8004eea <create_name+0x35a>
		lfn[di++] = w;					/* Store the Unicode character */
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	617a      	str	r2, [r7, #20]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c36:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004c38:	e7c5      	b.n	8004bc6 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	441a      	add	r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c46:	2b1f      	cmp	r3, #31
 8004c48:	d801      	bhi.n	8004c4e <create_name+0xbe>
 8004c4a:	2304      	movs	r3, #4
 8004c4c:	e000      	b.n	8004c50 <create_name+0xc0>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004c54:	e011      	b.n	8004c7a <create_name+0xea>
		w = lfn[di - 1];
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d002      	beq.n	8004c74 <create_name+0xe4>
 8004c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c70:	2b2e      	cmp	r3, #46	; 0x2e
 8004c72:	d106      	bne.n	8004c82 <create_name+0xf2>
		di--;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1ea      	bne.n	8004c56 <create_name+0xc6>
 8004c80:	e000      	b.n	8004c84 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 8004c82:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <create_name+0xfe>
 8004c8a:	2306      	movs	r3, #6
 8004c8c:	e12d      	b.n	8004eea <create_name+0x35a>

	lfn[di] = 0;						/* LFN is created */
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	2200      	movs	r2, #0
 8004c98:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	220b      	movs	r2, #11
 8004ca0:	2120      	movs	r1, #32
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fc00 	bl	80034a8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e002      	b.n	8004cb4 <create_name+0x124>
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d0f5      	beq.n	8004cae <create_name+0x11e>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8004cce:	d0ee      	beq.n	8004cae <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <create_name+0x15a>
 8004cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cda:	f043 0303 	orr.w	r3, r3, #3
 8004cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004ce2:	e002      	b.n	8004cea <create_name+0x15a>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <create_name+0x174>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	2b2e      	cmp	r3, #46	; 0x2e
 8004d02:	d1ef      	bne.n	8004ce4 <create_name+0x154>

	b = i = 0; ni = 8;
 8004d04:	2300      	movs	r3, #0
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d0e:	2308      	movs	r3, #8
 8004d10:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	61ba      	str	r2, [r7, #24]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 808f 	beq.w	8004e48 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d006      	beq.n	8004d3e <create_name+0x1ae>
 8004d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d32:	2b2e      	cmp	r3, #46	; 0x2e
 8004d34:	d10a      	bne.n	8004d4c <create_name+0x1bc>
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d006      	beq.n	8004d4c <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 8004d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d42:	f043 0303 	orr.w	r3, r3, #3
 8004d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d4a:	e07c      	b.n	8004e46 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004d4c:	6a3a      	ldr	r2, [r7, #32]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d203      	bcs.n	8004d5c <create_name+0x1cc>
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d123      	bne.n	8004da4 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b0b      	cmp	r3, #11
 8004d60:	d106      	bne.n	8004d70 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 8004d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d66:	f043 0303 	orr.w	r3, r3, #3
 8004d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d6e:	e074      	b.n	8004e5a <create_name+0x2ca>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d005      	beq.n	8004d84 <create_name+0x1f4>
 8004d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d7c:	f043 0303 	orr.w	r3, r3, #3
 8004d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d865      	bhi.n	8004e58 <create_name+0x2c8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	2308      	movs	r3, #8
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	230b      	movs	r3, #11
 8004d96:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004d98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004da2:	e050      	b.n	8004e46 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004da6:	2b7f      	cmp	r3, #127	; 0x7f
 8004da8:	d914      	bls.n	8004dd4 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 fb9c 	bl	80064ec <ff_convert>
 8004db4:	4603      	mov	r3, r0
 8004db6:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <create_name+0x238>
 8004dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dc0:	3b80      	subs	r3, #128	; 0x80
 8004dc2:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <create_name+0x2c0>)
 8004dc4:	5cd3      	ldrb	r3, [r2, r3]
 8004dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dcc:	f043 0302 	orr.w	r3, r3, #2
 8004dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <create_name+0x25a>
 8004dda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ddc:	4619      	mov	r1, r3
 8004dde:	481d      	ldr	r0, [pc, #116]	; (8004e54 <create_name+0x2c4>)
 8004de0:	f7fe fba2 	bl	8003528 <chk_chr>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004dea:	235f      	movs	r3, #95	; 0x5f
 8004dec:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004df2:	f043 0303 	orr.w	r3, r3, #3
 8004df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004dfa:	e01b      	b.n	8004e34 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004dfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d909      	bls.n	8004e16 <create_name+0x286>
 8004e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e04:	2b5a      	cmp	r3, #90	; 0x5a
 8004e06:	d806      	bhi.n	8004e16 <create_name+0x286>
					b |= 2;
 8004e08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e14:	e00e      	b.n	8004e34 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e18:	2b60      	cmp	r3, #96	; 0x60
 8004e1a:	d90b      	bls.n	8004e34 <create_name+0x2a4>
 8004e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e1e:	2b7a      	cmp	r3, #122	; 0x7a
 8004e20:	d808      	bhi.n	8004e34 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 8004e22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e30:	3b20      	subs	r3, #32
 8004e32:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	1c59      	adds	r1, r3, #1
 8004e3c:	6239      	str	r1, [r7, #32]
 8004e3e:	4413      	add	r3, r2
 8004e40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8004e46:	e764      	b.n	8004d12 <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 8004e48:	bf00      	nop
 8004e4a:	e006      	b.n	8004e5a <create_name+0x2ca>
 8004e4c:	08007060 	.word	0x08007060
 8004e50:	080070c0 	.word	0x080070c0
 8004e54:	0800706c 	.word	0x0800706c
			if (si > di) break;			/* No extension */
 8004e58:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2be5      	cmp	r3, #229	; 0xe5
 8004e62:	d103      	bne.n	8004e6c <create_name+0x2dc>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2205      	movs	r2, #5
 8004e6a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d104      	bne.n	8004e7c <create_name+0x2ec>
 8004e72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b0c      	cmp	r3, #12
 8004e86:	d005      	beq.n	8004e94 <create_name+0x304>
 8004e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d105      	bne.n	8004ea0 <create_name+0x310>
		cf |= NS_LFN;
 8004e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e98:	f043 0302 	orr.w	r3, r3, #2
 8004e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d117      	bne.n	8004edc <create_name+0x34c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004eac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d105      	bne.n	8004ec4 <create_name+0x334>
 8004eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ebc:	f043 0310 	orr.w	r3, r3, #16
 8004ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d105      	bne.n	8004edc <create_name+0x34c>
 8004ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ed4:	f043 0308 	orr.w	r3, r3, #8
 8004ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	330b      	adds	r3, #11
 8004ee2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004ee6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004ee8:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3728      	adds	r7, #40	; 0x28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop

08004ef4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b2f      	cmp	r3, #47	; 0x2f
 8004f04:	d003      	beq.n	8004f0e <follow_path+0x1a>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b5c      	cmp	r3, #92	; 0x5c
 8004f0c:	d102      	bne.n	8004f14 <follow_path+0x20>
		path++;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b1f      	cmp	r3, #31
 8004f20:	d809      	bhi.n	8004f36 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 8004f22:	2100      	movs	r1, #0
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff f8fb 	bl	8004120 <dir_sdi>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	615a      	str	r2, [r3, #20]
 8004f34:	e041      	b.n	8004fba <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004f36:	463b      	mov	r3, r7
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff fe28 	bl	8004b90 <create_name>
 8004f40:	4603      	mov	r3, r0
 8004f42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d132      	bne.n	8004fb0 <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fc72 	bl	8004834 <dir_find>
 8004f50:	4603      	mov	r3, r0
 8004f52:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	7adb      	ldrb	r3, [r3, #11]
 8004f5a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d125      	bne.n	8004fb4 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004f68:	7bbb      	ldrb	r3, [r7, #14]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d120      	bne.n	8004fb4 <follow_path+0xc0>
 8004f72:	2305      	movs	r3, #5
 8004f74:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004f76:	e01d      	b.n	8004fb4 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d11a      	bne.n	8004fb8 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	330b      	adds	r3, #11
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <follow_path+0xa8>
				res = FR_NO_PATH; break;
 8004f96:	2305      	movs	r3, #5
 8004f98:	73fb      	strb	r3, [r7, #15]
 8004f9a:	e00e      	b.n	8004fba <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fa62 	bl	800446c <ld_clust>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004fae:	e7c2      	b.n	8004f36 <follow_path+0x42>
			if (res != FR_OK) break;
 8004fb0:	bf00      	nop
 8004fb2:	e002      	b.n	8004fba <follow_path+0xc6>
				break;
 8004fb4:	bf00      	nop
 8004fb6:	e000      	b.n	8004fba <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004fb8:	bf00      	nop
		}
	}

	return res;
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d031      	beq.n	800503e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e002      	b.n	8004fe8 <get_ldnumber+0x24>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b1f      	cmp	r3, #31
 8004fee:	d903      	bls.n	8004ff8 <get_ldnumber+0x34>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b3a      	cmp	r3, #58	; 0x3a
 8004ff6:	d1f4      	bne.n	8004fe2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b3a      	cmp	r3, #58	; 0x3a
 8004ffe:	d11c      	bne.n	800503a <get_ldnumber+0x76>
			tp = *path;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	60fa      	str	r2, [r7, #12]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	3b30      	subs	r3, #48	; 0x30
 8005010:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b09      	cmp	r3, #9
 8005016:	d80e      	bhi.n	8005036 <get_ldnumber+0x72>
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	429a      	cmp	r2, r3
 800501e:	d10a      	bne.n	8005036 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <get_ldnumber+0x72>
					vol = (int)i;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	3301      	adds	r3, #1
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	e002      	b.n	8005040 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800503e:	693b      	ldr	r3, [r7, #16]
}
 8005040:	4618      	mov	r0, r3
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr
	...

0800504c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f04f 32ff 	mov.w	r2, #4294967295
 8005064:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fe fc6b 	bl	8003946 <move_window>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <check_fs+0x2e>
		return 3;
 8005076:	2303      	movs	r3, #3
 8005078:	e04a      	b.n	8005110 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005080:	3301      	adds	r3, #1
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	b21a      	sxth	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800508e:	b21b      	sxth	r3, r3
 8005090:	4313      	orrs	r3, r2
 8005092:	b21b      	sxth	r3, r3
 8005094:	4a20      	ldr	r2, [pc, #128]	; (8005118 <check_fs+0xcc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d001      	beq.n	800509e <check_fs+0x52>
		return 2;
 800509a:	2302      	movs	r3, #2
 800509c:	e038      	b.n	8005110 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3336      	adds	r3, #54	; 0x36
 80050a2:	3303      	adds	r3, #3
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	061a      	lsls	r2, r3, #24
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3336      	adds	r3, #54	; 0x36
 80050ac:	3302      	adds	r3, #2
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	041b      	lsls	r3, r3, #16
 80050b2:	4313      	orrs	r3, r2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	3236      	adds	r2, #54	; 0x36
 80050b8:	3201      	adds	r2, #1
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	0212      	lsls	r2, r2, #8
 80050be:	4313      	orrs	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <check_fs+0xd0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d101      	bne.n	80050d6 <check_fs+0x8a>
		return 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e01c      	b.n	8005110 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3352      	adds	r3, #82	; 0x52
 80050da:	3303      	adds	r3, #3
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	061a      	lsls	r2, r3, #24
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3352      	adds	r3, #82	; 0x52
 80050e4:	3302      	adds	r3, #2
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	4313      	orrs	r3, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	3252      	adds	r2, #82	; 0x52
 80050f0:	3201      	adds	r2, #1
 80050f2:	7812      	ldrb	r2, [r2, #0]
 80050f4:	0212      	lsls	r2, r2, #8
 80050f6:	4313      	orrs	r3, r2
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80050fe:	4313      	orrs	r3, r2
 8005100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005104:	4a05      	ldr	r2, [pc, #20]	; (800511c <check_fs+0xd0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <check_fs+0xc2>
		return 0;
 800510a:	2300      	movs	r3, #0
 800510c:	e000      	b.n	8005110 <check_fs+0xc4>

	return 1;
 800510e:	2301      	movs	r3, #1
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	ffffaa55 	.word	0xffffaa55
 800511c:	00544146 	.word	0x00544146

08005120 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b096      	sub	sp, #88	; 0x58
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005134:	68b8      	ldr	r0, [r7, #8]
 8005136:	f7ff ff45 	bl	8004fc4 <get_ldnumber>
 800513a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800513c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513e:	2b00      	cmp	r3, #0
 8005140:	da01      	bge.n	8005146 <find_volume+0x26>
 8005142:	230b      	movs	r3, #11
 8005144:	e2a8      	b.n	8005698 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005146:	4a9d      	ldr	r2, [pc, #628]	; (80053bc <find_volume+0x29c>)
 8005148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <find_volume+0x3a>
 8005156:	230c      	movs	r3, #12
 8005158:	e29e      	b.n	8005698 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800515e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01b      	beq.n	80051a2 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe f8dd 	bl	8003330 <disk_status>
 8005176:	4603      	mov	r3, r0
 8005178:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800517c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10c      	bne.n	80051a2 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <find_volume+0x7e>
 800518e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800519a:	230a      	movs	r3, #10
 800519c:	e27c      	b.n	8005698 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800519e:	2300      	movs	r3, #0
 80051a0:	e27a      	b.n	8005698 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80051aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe f8d2 	bl	8003364 <disk_initialize>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80051c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80051d2:	2303      	movs	r3, #3
 80051d4:	e260      	b.n	8005698 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <find_volume+0xcc>
 80051dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80051e8:	230a      	movs	r3, #10
 80051ea:	e255      	b.n	8005698 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80051f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051f4:	f7ff ff2a 	bl	800504c <check_fs>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80051fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005202:	2b01      	cmp	r3, #1
 8005204:	d153      	bne.n	80052ae <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005206:	2300      	movs	r3, #0
 8005208:	643b      	str	r3, [r7, #64]	; 0x40
 800520a:	e028      	b.n	800525e <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800520c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800520e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005216:	4413      	add	r3, r2
 8005218:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	3304      	adds	r3, #4
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d012      	beq.n	800524a <find_volume+0x12a>
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	330b      	adds	r3, #11
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	061a      	lsls	r2, r3, #24
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	330a      	adds	r3, #10
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	041b      	lsls	r3, r3, #16
 8005234:	4313      	orrs	r3, r2
 8005236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005238:	3209      	adds	r2, #9
 800523a:	7812      	ldrb	r2, [r2, #0]
 800523c:	0212      	lsls	r2, r2, #8
 800523e:	4313      	orrs	r3, r2
 8005240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005242:	3208      	adds	r2, #8
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	431a      	orrs	r2, r3
 8005248:	e000      	b.n	800524c <find_volume+0x12c>
 800524a:	2200      	movs	r2, #0
 800524c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	3358      	adds	r3, #88	; 0x58
 8005252:	443b      	add	r3, r7
 8005254:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525a:	3301      	adds	r3, #1
 800525c:	643b      	str	r3, [r7, #64]	; 0x40
 800525e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005260:	2b03      	cmp	r3, #3
 8005262:	d9d3      	bls.n	800520c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005264:	2300      	movs	r3, #0
 8005266:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <find_volume+0x154>
 800526e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005270:	3b01      	subs	r3, #1
 8005272:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	3358      	adds	r3, #88	; 0x58
 800527a:	443b      	add	r3, r7
 800527c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005280:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <find_volume+0x174>
 8005288:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800528a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800528c:	f7ff fede 	bl	800504c <check_fs>
 8005290:	4603      	mov	r3, r0
 8005292:	e000      	b.n	8005296 <find_volume+0x176>
 8005294:	2302      	movs	r3, #2
 8005296:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800529a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <find_volume+0x18e>
 80052a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a4:	3301      	adds	r3, #1
 80052a6:	643b      	str	r3, [r7, #64]	; 0x40
 80052a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d9e2      	bls.n	8005274 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80052ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d101      	bne.n	80052ba <find_volume+0x19a>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e1ee      	b.n	8005698 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80052ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <find_volume+0x1a6>
 80052c2:	230d      	movs	r3, #13
 80052c4:	e1e8      	b.n	8005698 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	7b1b      	ldrb	r3, [r3, #12]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	b21a      	sxth	r2, r3
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	7adb      	ldrb	r3, [r3, #11]
 80052d2:	b21b      	sxth	r3, r3
 80052d4:	4313      	orrs	r3, r2
 80052d6:	b21b      	sxth	r3, r3
 80052d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052dc:	d001      	beq.n	80052e2 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80052de:	230d      	movs	r3, #13
 80052e0:	e1da      	b.n	8005698 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	7ddb      	ldrb	r3, [r3, #23]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	b21a      	sxth	r2, r3
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	7d9b      	ldrb	r3, [r3, #22]
 80052ee:	b21b      	sxth	r3, r3
 80052f0:	4313      	orrs	r3, r2
 80052f2:	b21b      	sxth	r3, r3
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80052f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d112      	bne.n	8005324 <find_volume+0x204>
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005304:	061a      	lsls	r2, r3, #24
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	4313      	orrs	r3, r2
 8005310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005312:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005316:	0212      	lsls	r2, r2, #8
 8005318:	4313      	orrs	r3, r2
 800531a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005320:	4313      	orrs	r3, r2
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005328:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	7c1a      	ldrb	r2, [r3, #16]
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800533c:	2b01      	cmp	r3, #1
 800533e:	d006      	beq.n	800534e <find_volume+0x22e>
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005346:	2b02      	cmp	r3, #2
 8005348:	d001      	beq.n	800534e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800534a:	230d      	movs	r3, #13
 800534c:	e1a4      	b.n	8005698 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005354:	461a      	mov	r2, r3
 8005356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	7b5a      	ldrb	r2, [r3, #13]
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <find_volume+0x268>
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005378:	461a      	mov	r2, r3
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005380:	3b01      	subs	r3, #1
 8005382:	4013      	ands	r3, r2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8005388:	230d      	movs	r3, #13
 800538a:	e185      	b.n	8005698 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	7c9b      	ldrb	r3, [r3, #18]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	b21a      	sxth	r2, r3
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	7c5b      	ldrb	r3, [r3, #17]
 8005398:	b21b      	sxth	r3, r3
 800539a:	4313      	orrs	r3, r2
 800539c:	b21b      	sxth	r3, r3
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80053b6:	230d      	movs	r3, #13
 80053b8:	e16e      	b.n	8005698 <find_volume+0x578>
 80053ba:	bf00      	nop
 80053bc:	20000444 	.word	0x20000444

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80053c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c2:	7d1b      	ldrb	r3, [r3, #20]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	b21a      	sxth	r2, r3
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	7cdb      	ldrb	r3, [r3, #19]
 80053cc:	b21b      	sxth	r3, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80053d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d112      	bne.n	8005402 <find_volume+0x2e2>
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80053e2:	061a      	lsls	r2, r3, #24
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80053ea:	041b      	lsls	r3, r3, #16
 80053ec:	4313      	orrs	r3, r2
 80053ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053f0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80053f4:	0212      	lsls	r2, r2, #8
 80053f6:	4313      	orrs	r3, r2
 80053f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80053fe:	4313      	orrs	r3, r2
 8005400:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	7bdb      	ldrb	r3, [r3, #15]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	b21a      	sxth	r2, r3
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	7b9b      	ldrb	r3, [r3, #14]
 800540e:	b21b      	sxth	r3, r3
 8005410:	4313      	orrs	r3, r2
 8005412:	b21b      	sxth	r3, r3
 8005414:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <find_volume+0x300>
 800541c:	230d      	movs	r3, #13
 800541e:	e13b      	b.n	8005698 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005420:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	4413      	add	r3, r2
 8005426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005428:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800542c:	0912      	lsrs	r2, r2, #4
 800542e:	b292      	uxth	r2, r2
 8005430:	4413      	add	r3, r2
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	429a      	cmp	r2, r3
 800543a:	d201      	bcs.n	8005440 <find_volume+0x320>
 800543c:	230d      	movs	r3, #13
 800543e:	e12b      	b.n	8005698 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005448:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800544c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <find_volume+0x33c>
 8005458:	230d      	movs	r3, #13
 800545a:	e11d      	b.n	8005698 <find_volume+0x578>
	fmt = FS_FAT12;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005468:	4293      	cmp	r3, r2
 800546a:	d902      	bls.n	8005472 <find_volume+0x352>
 800546c:	2302      	movs	r3, #2
 800546e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005478:	4293      	cmp	r3, r2
 800547a:	d902      	bls.n	8005482 <find_volume+0x362>
 800547c:	2303      	movs	r3, #3
 800547e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1c9a      	adds	r2, r3, #2
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800548c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005490:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005494:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005498:	441a      	add	r2, r3
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80054a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	441a      	add	r2, r3
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80054ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d121      	bne.n	80054f8 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <find_volume+0x3a2>
 80054be:	230d      	movs	r3, #13
 80054c0:	e0ea      	b.n	8005698 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80054c8:	061a      	lsls	r2, r3, #24
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	4313      	orrs	r3, r2
 80054d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80054da:	0212      	lsls	r2, r2, #8
 80054dc:	4313      	orrs	r3, r2
 80054de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80054e4:	431a      	orrs	r2, r3
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	647b      	str	r3, [r7, #68]	; 0x44
 80054f6:	e025      	b.n	8005544 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <find_volume+0x3e6>
 8005502:	230d      	movs	r3, #13
 8005504:	e0c8      	b.n	8005698 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800550c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550e:	441a      	add	r2, r3
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800551a:	2b02      	cmp	r3, #2
 800551c:	d104      	bne.n	8005528 <find_volume+0x408>
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	e00c      	b.n	8005542 <find_volume+0x422>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800552e:	4613      	mov	r3, r2
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	4413      	add	r3, r2
 8005534:	085a      	lsrs	r2, r3, #1
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005542:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800554a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005550:	0a5b      	lsrs	r3, r3, #9
 8005552:	429a      	cmp	r2, r3
 8005554:	d201      	bcs.n	800555a <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8005556:	230d      	movs	r3, #13
 8005558:	e09e      	b.n	8005698 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	f04f 32ff 	mov.w	r2, #4294967295
 8005560:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	2280      	movs	r2, #128	; 0x80
 8005574:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005578:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800557c:	2b03      	cmp	r3, #3
 800557e:	d177      	bne.n	8005670 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	b21a      	sxth	r2, r3
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005590:	b21b      	sxth	r3, r3
 8005592:	4313      	orrs	r3, r2
 8005594:	b21b      	sxth	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d16a      	bne.n	8005670 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800559a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559c:	3301      	adds	r3, #1
 800559e:	4619      	mov	r1, r3
 80055a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055a2:	f7fe f9d0 	bl	8003946 <move_window>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d161      	bne.n	8005670 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	b21a      	sxth	r2, r3
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80055c4:	b21b      	sxth	r3, r3
 80055c6:	4313      	orrs	r3, r2
 80055c8:	b21b      	sxth	r3, r3
 80055ca:	4a35      	ldr	r2, [pc, #212]	; (80056a0 <find_volume+0x580>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d14f      	bne.n	8005670 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	78db      	ldrb	r3, [r3, #3]
 80055d4:	061a      	lsls	r2, r3, #24
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	789b      	ldrb	r3, [r3, #2]
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	4313      	orrs	r3, r2
 80055de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e0:	7852      	ldrb	r2, [r2, #1]
 80055e2:	0212      	lsls	r2, r2, #8
 80055e4:	4313      	orrs	r3, r2
 80055e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	4a2d      	ldr	r2, [pc, #180]	; (80056a4 <find_volume+0x584>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d13e      	bne.n	8005670 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80055f8:	061a      	lsls	r2, r3, #24
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	4313      	orrs	r3, r2
 8005604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005606:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800560a:	0212      	lsls	r2, r2, #8
 800560c:	4313      	orrs	r3, r2
 800560e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005610:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005614:	4313      	orrs	r3, r2
 8005616:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <find_volume+0x588>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d129      	bne.n	8005670 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005622:	061a      	lsls	r2, r3, #24
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	4313      	orrs	r3, r2
 800562e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005630:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005634:	0212      	lsls	r2, r2, #8
 8005636:	4313      	orrs	r3, r2
 8005638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800563a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800563e:	431a      	orrs	r2, r3
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800564c:	061a      	lsls	r2, r3, #24
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	4313      	orrs	r3, r2
 8005658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800565e:	0212      	lsls	r2, r2, #8
 8005660:	4313      	orrs	r3, r2
 8005662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005664:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005668:	431a      	orrs	r2, r3
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005676:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800567a:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <find_volume+0x58c>)
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	3301      	adds	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <find_volume+0x58c>)
 8005684:	801a      	strh	r2, [r3, #0]
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <find_volume+0x58c>)
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005690:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005692:	f7fe f8e5 	bl	8003860 <clear_lock>
#endif

	return FR_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3758      	adds	r7, #88	; 0x58
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	ffffaa55 	.word	0xffffaa55
 80056a4:	41615252 	.word	0x41615252
 80056a8:	61417272 	.word	0x61417272
 80056ac:	20000448 	.word	0x20000448

080056b0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01d      	beq.n	80056fe <validate+0x4e>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d019      	beq.n	80056fe <validate+0x4e>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d013      	beq.n	80056fe <validate+0x4e>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	889b      	ldrh	r3, [r3, #4]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d10b      	bne.n	80056fe <validate+0x4e>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fd fe1e 	bl	8003330 <disk_status>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <validate+0x52>
		return FR_INVALID_OBJECT;
 80056fe:	2309      	movs	r3, #9
 8005700:	e000      	b.n	8005704 <validate+0x54>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800571e:	f107 0310 	add.w	r3, r7, #16
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fc4e 	bl	8004fc4 <get_ldnumber>
 8005728:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	da01      	bge.n	8005734 <f_mount+0x28>
 8005730:	230b      	movs	r3, #11
 8005732:	e02d      	b.n	8005790 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <f_mount+0x8c>)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d006      	beq.n	8005752 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005744:	69b8      	ldr	r0, [r7, #24]
 8005746:	f7fe f88b 	bl	8003860 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	490d      	ldr	r1, [pc, #52]	; (8005798 <f_mount+0x8c>)
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <f_mount+0x6a>
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d001      	beq.n	800577a <f_mount+0x6e>
 8005776:	2300      	movs	r3, #0
 8005778:	e00a      	b.n	8005790 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800577a:	f107 0108 	add.w	r1, r7, #8
 800577e:	f107 030c 	add.w	r3, r7, #12
 8005782:	2200      	movs	r2, #0
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fccb 	bl	8005120 <find_volume>
 800578a:	4603      	mov	r3, r0
 800578c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800578e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000444 	.word	0x20000444

0800579c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b096      	sub	sp, #88	; 0x58
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	4613      	mov	r3, r2
 80057a8:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <f_open+0x18>
 80057b0:	2309      	movs	r3, #9
 80057b2:	e16d      	b.n	8005a90 <f_open+0x2f4>
	fp->fs = 0;			/* Clear file object */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	f107 0108 	add.w	r1, r7, #8
 80057ce:	f107 0320 	add.w	r3, r7, #32
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fca4 	bl	8005120 <find_volume>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80057de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 8152 	bne.w	8005a8c <f_open+0x2f0>
		INIT_BUF(dj);
 80057e8:	f107 0314 	add.w	r3, r7, #20
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ee:	4baa      	ldr	r3, [pc, #680]	; (8005a98 <f_open+0x2fc>)
 80057f0:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	f107 0320 	add.w	r3, r7, #32
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fb7a 	bl	8004ef4 <follow_path>
 8005800:	4603      	mov	r3, r0
 8005802:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800580a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800580e:	2b00      	cmp	r3, #0
 8005810:	d118      	bne.n	8005844 <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 8005812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <f_open+0x84>
				res = FR_INVALID_NAME;
 8005818:	2306      	movs	r3, #6
 800581a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800581e:	e011      	b.n	8005844 <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	bf14      	ite	ne
 800582a:	2301      	movne	r3, #1
 800582c:	2300      	moveq	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	f107 0320 	add.w	r3, r7, #32
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd fe8f 	bl	800355c <chk_lock>
 800583e:	4603      	mov	r3, r0
 8005840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	f003 031c 	and.w	r3, r3, #28
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 809a 	beq.w	8005984 <f_open+0x1e8>
			if (res != FR_OK) {					/* No file, create new */
 8005850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005854:	2b00      	cmp	r3, #0
 8005856:	d019      	beq.n	800588c <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005858:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800585c:	2b04      	cmp	r3, #4
 800585e:	d10e      	bne.n	800587e <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005860:	f7fd fee6 	bl	8003630 <enq_lock>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <f_open+0xdc>
 800586a:	f107 0320 	add.w	r3, r7, #32
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f894 	bl	800499c <dir_register>
 8005874:	4603      	mov	r3, r0
 8005876:	e000      	b.n	800587a <f_open+0xde>
 8005878:	2312      	movs	r3, #18
 800587a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	f043 0308 	orr.w	r3, r3, #8
 8005884:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	653b      	str	r3, [r7, #80]	; 0x50
 800588a:	e012      	b.n	80058b2 <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588e:	330b      	adds	r3, #11
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	f003 0311 	and.w	r3, r3, #17
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <f_open+0x106>
					res = FR_DENIED;
 800589a:	2307      	movs	r3, #7
 800589c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80058a0:	e007      	b.n	80058b2 <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <f_open+0x116>
						res = FR_EXIST;
 80058ac:	2308      	movs	r3, #8
 80058ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80058b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 8082 	bne.w	80059c0 <f_open+0x224>
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d07c      	beq.n	80059c0 <f_open+0x224>
				dw = GET_FATTIME();				/* Created time */
 80058c6:	f7fd fcd7 	bl	8003278 <get_fattime>
 80058ca:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 80058cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ce:	330e      	adds	r3, #14
 80058d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d8:	b29b      	uxth	r3, r3
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	b29a      	uxth	r2, r3
 80058de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e0:	330f      	adds	r3, #15
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	0c1a      	lsrs	r2, r3, #16
 80058ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ec:	3310      	adds	r3, #16
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f4:	0e1a      	lsrs	r2, r3, #24
 80058f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f8:	3311      	adds	r3, #17
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80058fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005900:	330b      	adds	r3, #11
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005908:	331c      	adds	r3, #28
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005910:	331d      	adds	r3, #29
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005918:	331e      	adds	r3, #30
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005920:	331f      	adds	r3, #31
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fd9e 	bl	800446c <ld_clust>
 8005930:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 8005932:	2100      	movs	r1, #0
 8005934:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005936:	f7fe fdc6 	bl	80044c6 <st_clust>
				dj.fs->wflag = 1;
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005944:	2b00      	cmp	r3, #0
 8005946:	d03b      	beq.n	80059c0 <f_open+0x224>
					dw = dj.fs->winsect;
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800594e:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe faba 	bl	8003ece <remove_chain>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 8005960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005964:	2b00      	cmp	r3, #0
 8005966:	d12b      	bne.n	80059c0 <f_open+0x224>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800596c:	3a01      	subs	r2, #1
 800596e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd ffe5 	bl	8003946 <move_window>
 800597c:	4603      	mov	r3, r0
 800597e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005982:	e01d      	b.n	80059c0 <f_open+0x224>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005984:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005988:	2b00      	cmp	r3, #0
 800598a:	d119      	bne.n	80059c0 <f_open+0x224>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800598c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598e:	330b      	adds	r3, #11
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <f_open+0x206>
					res = FR_NO_FILE;
 800599a:	2304      	movs	r3, #4
 800599c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80059a0:	e00e      	b.n	80059c0 <f_open+0x224>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d009      	beq.n	80059c0 <f_open+0x224>
 80059ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ae:	330b      	adds	r3, #11
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <f_open+0x224>
						res = FR_DENIED;
 80059ba:	2307      	movs	r3, #7
 80059bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 80059c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d129      	bne.n	8005a1c <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <f_open+0x23e>
				mode |= FA__WRITTEN;
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	f043 0320 	orr.w	r3, r3, #32
 80059d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059e8:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	f107 0320 	add.w	r3, r7, #32
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fd fe38 	bl	8003678 <inc_lock>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <f_open+0x280>
 8005a16:	2302      	movs	r3, #2
 8005a18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005a1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d133      	bne.n	8005a8c <f_open+0x2f0>
			fp->flag = mode;					/* File access mode */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	79fa      	ldrb	r2, [r7, #7]
 8005a28:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe fd19 	bl	800446c <ld_clust>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a42:	331f      	adds	r3, #31
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	061a      	lsls	r2, r3, #24
 8005a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a4a:	331e      	adds	r3, #30
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	041b      	lsls	r3, r3, #16
 8005a50:	4313      	orrs	r3, r2
 8005a52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a54:	321d      	adds	r2, #29
 8005a56:	7812      	ldrb	r2, [r2, #0]
 8005a58:	0212      	lsls	r2, r2, #8
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a5e:	321c      	adds	r2, #28
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3758      	adds	r7, #88	; 0x58
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000464 	.word	0x20000464

08005a9c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08c      	sub	sp, #48	; 0x30
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff fdfb 	bl	80056b0 <validate>
 8005aba:	4603      	mov	r3, r0
 8005abc:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005abe:	7ffb      	ldrb	r3, [r7, #31]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <f_read+0x2c>
 8005ac4:	7ffb      	ldrb	r3, [r7, #31]
 8005ac6:	e108      	b.n	8005cda <f_read+0x23e>
	if (fp->err)								/* Check error */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	79db      	ldrb	r3, [r3, #7]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	79db      	ldrb	r3, [r3, #7]
 8005ad4:	e101      	b.n	8005cda <f_read+0x23e>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	799b      	ldrb	r3, [r3, #6]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005ae2:	2307      	movs	r3, #7
 8005ae4:	e0f9      	b.n	8005cda <f_read+0x23e>
	remain = fp->fsize - fp->fptr;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	f240 80ea 	bls.w	8005cd0 <f_read+0x234>
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005b00:	e0e6      	b.n	8005cd0 <f_read+0x234>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f040 80a3 	bne.w	8005c56 <f_read+0x1ba>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	0a5b      	lsrs	r3, r3, #9
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	4013      	ands	r3, r2
 8005b26:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d130      	bne.n	8005b90 <f_read+0xf4>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d103      	bne.n	8005b3e <f_read+0xa2>
					clst = fp->sclust;			/* Follow from the origin */
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b3c:	e014      	b.n	8005b68 <f_read+0xcc>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <f_read+0xba>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7fe fab5 	bl	80040bc <clmt_clust>
 8005b52:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b54:	e008      	b.n	8005b68 <f_read+0xcc>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f7fd ffec 	bl	8003b3e <get_fat>
 8005b66:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d804      	bhi.n	8005b78 <f_read+0xdc>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2202      	movs	r2, #2
 8005b72:	71da      	strb	r2, [r3, #7]
 8005b74:	2302      	movs	r3, #2
 8005b76:	e0b0      	b.n	8005cda <f_read+0x23e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d104      	bne.n	8005b8a <f_read+0xee>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	71da      	strb	r2, [r3, #7]
 8005b86:	2301      	movs	r3, #1
 8005b88:	e0a7      	b.n	8005cda <f_read+0x23e>
				fp->clust = clst;				/* Update current cluster */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b8e:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f7fd ffae 	bl	8003afc <clust2sect>
 8005ba0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <f_read+0x116>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2202      	movs	r2, #2
 8005bac:	71da      	strb	r2, [r3, #7]
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e093      	b.n	8005cda <f_read+0x23e>
			sect += csect;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	0a5b      	lsrs	r3, r3, #9
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d044      	beq.n	8005c50 <f_read+0x1b4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005bc6:	7dfa      	ldrb	r2, [r7, #23]
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	4413      	add	r3, r2
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d907      	bls.n	8005be8 <f_read+0x14c>
					cc = fp->fs->csize - csect;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005be0:	461a      	mov	r2, r3
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	6a39      	ldr	r1, [r7, #32]
 8005bf6:	f7fd fbdb 	bl	80033b0 <disk_read>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <f_read+0x16e>
					ABORT(fp->fs, FR_DISK_ERR);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	71da      	strb	r2, [r3, #7]
 8005c06:	2301      	movs	r3, #1
 8005c08:	e067      	b.n	8005cda <f_read+0x23e>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d018      	beq.n	8005c48 <f_read+0x1ac>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d90f      	bls.n	8005c48 <f_read+0x1ac>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	025b      	lsls	r3, r3, #9
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	18d0      	adds	r0, r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7fd fc12 	bl	800346c <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	025b      	lsls	r3, r3, #9
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005c4e:	e02b      	b.n	8005ca8 <f_read+0x20c>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d901      	bls.n	8005c70 <f_read+0x1d4>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f7fd fe63 	bl	8003946 <move_window>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <f_read+0x1f4>
			ABORT(fp->fs, FR_DISK_ERR);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	71da      	strb	r2, [r3, #7]
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e024      	b.n	8005cda <f_read+0x23e>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9c:	4413      	add	r3, r2
 8005c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6a38      	ldr	r0, [r7, #32]
 8005ca4:	f7fd fbe2 	bl	800346c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	4413      	add	r3, r2
 8005cae:	623b      	str	r3, [r7, #32]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	441a      	add	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	441a      	add	r2, r3
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f47f af15 	bne.w	8005b02 <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3730      	adds	r7, #48	; 0x30
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b08a      	sub	sp, #40	; 0x28
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff fcd8 	bl	80056b0 <validate>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <f_write+0x2c>
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
 8005d0c:	e160      	b.n	8005fd0 <f_write+0x2ee>
	if (fp->err)							/* Check error */
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	79db      	ldrb	r3, [r3, #7]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	79db      	ldrb	r3, [r3, #7]
 8005d1a:	e159      	b.n	8005fd0 <f_write+0x2ee>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	799b      	ldrb	r3, [r3, #6]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005d28:	2307      	movs	r3, #7
 8005d2a:	e151      	b.n	8005fd0 <f_write+0x2ee>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	441a      	add	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	f080 8131 	bcs.w	8005fa0 <f_write+0x2be>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005d42:	e12d      	b.n	8005fa0 <f_write+0x2be>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 80e5 	bne.w	8005f1c <f_write+0x23a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	0a5b      	lsrs	r3, r3, #9
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	4013      	ands	r3, r2
 8005d68:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005d6a:	7dbb      	ldrb	r3, [r7, #22]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d145      	bne.n	8005dfc <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10d      	bne.n	8005d94 <f_write+0xb2>
					clst = fp->sclust;		/* Follow from the origin */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d11c      	bne.n	8005dbe <f_write+0xdc>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe f8f9 	bl	8003f82 <create_chain>
 8005d90:	6278      	str	r0, [r7, #36]	; 0x24
 8005d92:	e014      	b.n	8005dbe <f_write+0xdc>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <f_write+0xca>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4619      	mov	r1, r3
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7fe f98a 	bl	80040bc <clmt_clust>
 8005da8:	6278      	str	r0, [r7, #36]	; 0x24
 8005daa:	e008      	b.n	8005dbe <f_write+0xdc>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f7fe f8e3 	bl	8003f82 <create_chain>
 8005dbc:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80f2 	beq.w	8005faa <f_write+0x2c8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d104      	bne.n	8005dd6 <f_write+0xf4>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	71da      	strb	r2, [r3, #7]
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e0fc      	b.n	8005fd0 <f_write+0x2ee>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d104      	bne.n	8005de8 <f_write+0x106>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	71da      	strb	r2, [r3, #7]
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0f3      	b.n	8005fd0 <f_write+0x2ee>
				fp->clust = clst;			/* Update current cluster */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dec:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d102      	bne.n	8005dfc <f_write+0x11a>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfa:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d10c      	bne.n	8005e26 <f_write+0x144>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fd fd4f 	bl	80038b4 <sync_window>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <f_write+0x144>
				ABORT(fp->fs, FR_DISK_ERR);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	71da      	strb	r2, [r3, #7]
 8005e22:	2301      	movs	r3, #1
 8005e24:	e0d4      	b.n	8005fd0 <f_write+0x2ee>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f7fd fe63 	bl	8003afc <clust2sect>
 8005e36:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d104      	bne.n	8005e48 <f_write+0x166>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2202      	movs	r2, #2
 8005e42:	71da      	strb	r2, [r3, #7]
 8005e44:	2302      	movs	r3, #2
 8005e46:	e0c3      	b.n	8005fd0 <f_write+0x2ee>
			sect += csect;
 8005e48:	7dbb      	ldrb	r3, [r7, #22]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	0a5b      	lsrs	r3, r3, #9
 8005e54:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d044      	beq.n	8005ee6 <f_write+0x204>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005e5c:	7dba      	ldrb	r2, [r7, #22]
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d907      	bls.n	8005e7e <f_write+0x19c>
					cc = fp->fs->csize - csect;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005e76:	461a      	mov	r2, r3
 8005e78:	7dbb      	ldrb	r3, [r7, #22]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	69b9      	ldr	r1, [r7, #24]
 8005e8c:	f7fd fab0 	bl	80033f0 <disk_write>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <f_write+0x1be>
					ABORT(fp->fs, FR_DISK_ERR);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	71da      	strb	r2, [r3, #7]
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e097      	b.n	8005fd0 <f_write+0x2ee>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d915      	bls.n	8005ede <f_write+0x1fc>
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	025b      	lsls	r3, r3, #9
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ece:	4619      	mov	r1, r3
 8005ed0:	f7fd facc 	bl	800346c <mem_cpy>
					fp->fs->wflag = 0;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	025b      	lsls	r3, r3, #9
 8005ee2:	623b      	str	r3, [r7, #32]
				continue;
 8005ee4:	e048      	b.n	8005f78 <f_write+0x296>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d311      	bcc.n	8005f16 <f_write+0x234>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd fcdc 	bl	80038b4 <sync_window>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <f_write+0x22a>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	71da      	strb	r2, [r3, #7]
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e061      	b.n	8005fd0 <f_write+0x2ee>
				fp->fs->winsect = sect;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f24:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005f28:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d901      	bls.n	8005f36 <f_write+0x254>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7fd fd00 	bl	8003946 <move_window>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <f_write+0x274>
			ABORT(fp->fs, FR_DISK_ERR);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	71da      	strb	r2, [r3, #7]
 8005f52:	2301      	movs	r3, #1
 8005f54:	e03c      	b.n	8005fd0 <f_write+0x2ee>
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f62:	4413      	add	r3, r2
 8005f64:	6a3a      	ldr	r2, [r7, #32]
 8005f66:	69b9      	ldr	r1, [r7, #24]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fd fa7f 	bl	800346c <mem_cpy>
		fp->fs->wflag = 1;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	441a      	add	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	609a      	str	r2, [r3, #8]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	441a      	add	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f47f aece 	bne.w	8005d44 <f_write+0x62>
 8005fa8:	e000      	b.n	8005fac <f_write+0x2ca>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005faa:	bf00      	nop
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d903      	bls.n	8005fc0 <f_write+0x2de>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	799b      	ldrb	r3, [r3, #6]
 8005fc4:	f043 0320 	orr.w	r3, r3, #32
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3728      	adds	r7, #40	; 0x28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fb65 	bl	80056b0 <validate>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d178      	bne.n	80060e2 <f_sync+0x10a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	799b      	ldrb	r3, [r3, #6]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d072      	beq.n	80060e2 <f_sync+0x10a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f7fd fc9d 	bl	8003946 <move_window>
 800600c:	4603      	mov	r3, r0
 800600e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006010:	7dfb      	ldrb	r3, [r7, #23]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d165      	bne.n	80060e2 <f_sync+0x10a>
				dir = fp->dir_ptr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	330b      	adds	r3, #11
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	330b      	adds	r3, #11
 8006026:	f042 0220 	orr.w	r2, r2, #32
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	331c      	adds	r3, #28
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	b29b      	uxth	r3, r3
 8006040:	0a1b      	lsrs	r3, r3, #8
 8006042:	b29a      	uxth	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	331d      	adds	r3, #29
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	0c1a      	lsrs	r2, r3, #16
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	331e      	adds	r3, #30
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	0e1a      	lsrs	r2, r3, #24
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	331f      	adds	r3, #31
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	4619      	mov	r1, r3
 800606e:	6938      	ldr	r0, [r7, #16]
 8006070:	f7fe fa29 	bl	80044c6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006074:	f7fd f900 	bl	8003278 <get_fattime>
 8006078:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3316      	adds	r3, #22
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	b29b      	uxth	r3, r3
 8006088:	0a1b      	lsrs	r3, r3, #8
 800608a:	b29a      	uxth	r2, r3
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	3317      	adds	r3, #23
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	0c1a      	lsrs	r2, r3, #16
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	3318      	adds	r3, #24
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	0e1a      	lsrs	r2, r3, #24
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	3319      	adds	r3, #25
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	3312      	adds	r3, #18
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	3313      	adds	r3, #19
 80060b8:	2200      	movs	r2, #0
 80060ba:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	799b      	ldrb	r3, [r3, #6]
 80060c0:	f023 0320 	bic.w	r3, r3, #32
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fd fc62 	bl	80039a2 <sync_fs>
 80060de:	4603      	mov	r3, r0
 80060e0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ff6f 	bl	8005fd8 <f_sync>
 80060fa:	4603      	mov	r3, r0
 80060fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d114      	bne.n	800612e <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff fad3 	bl	80056b0 <validate>
 800610a:	4603      	mov	r3, r0
 800610c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10c      	bne.n	800612e <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	4618      	mov	r0, r3
 800611a:	f7fd fb5d 	bl	80037d8 <dec_lock>
 800611e:	4603      	mov	r3, r0
 8006120:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08e      	sub	sp, #56	; 0x38
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006144:	f107 030c 	add.w	r3, r7, #12
 8006148:	2200      	movs	r2, #0
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fe ffe7 	bl	8005120 <find_volume>
 8006152:	4603      	mov	r3, r0
 8006154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800615e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 80af 	bne.w	80062c6 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006174:	3b02      	subs	r3, #2
 8006176:	429a      	cmp	r2, r3
 8006178:	d805      	bhi.n	8006186 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e09f      	b.n	80062c6 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800618c:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8006192:	7efb      	ldrb	r3, [r7, #27]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d125      	bne.n	80061e4 <f_getfree+0xac>
				clst = 2;
 8006198:	2302      	movs	r3, #2
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800619c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800619e:	69f8      	ldr	r0, [r7, #28]
 80061a0:	f7fd fccd 	bl	8003b3e <get_fat>
 80061a4:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d103      	bne.n	80061b6 <f_getfree+0x7e>
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80061b4:	e077      	b.n	80062a6 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d103      	bne.n	80061c4 <f_getfree+0x8c>
 80061bc:	2302      	movs	r3, #2
 80061be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80061c2:	e070      	b.n	80062a6 <f_getfree+0x16e>
					if (stat == 0) n++;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <f_getfree+0x98>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	3301      	adds	r3, #1
 80061ce:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	3301      	adds	r3, #1
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061de:	429a      	cmp	r2, r3
 80061e0:	d3dc      	bcc.n	800619c <f_getfree+0x64>
 80061e2:	e060      	b.n	80062a6 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
 80061f8:	2300      	movs	r3, #0
 80061fa:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d112      	bne.n	8006228 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	62ba      	str	r2, [r7, #40]	; 0x28
 8006208:	4619      	mov	r1, r3
 800620a:	69f8      	ldr	r0, [r7, #28]
 800620c:	f7fd fb9b 	bl	8003946 <move_window>
 8006210:	4603      	mov	r3, r0
 8006212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8006216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800621a:	2b00      	cmp	r3, #0
 800621c:	d142      	bne.n	80062a4 <f_getfree+0x16c>
						p = fs->win.d8;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8006228:	7efb      	ldrb	r3, [r7, #27]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d115      	bne.n	800625a <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	3301      	adds	r3, #1
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	b21a      	sxth	r2, r3
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	b21b      	sxth	r3, r3
 800623e:	4313      	orrs	r3, r2
 8006240:	b21b      	sxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <f_getfree+0x114>
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	3301      	adds	r3, #1
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	3302      	adds	r3, #2
 8006250:	623b      	str	r3, [r7, #32]
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	3b02      	subs	r3, #2
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
 8006258:	e01d      	b.n	8006296 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	3303      	adds	r3, #3
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	061a      	lsls	r2, r3, #24
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	3302      	adds	r3, #2
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	4313      	orrs	r3, r2
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	3201      	adds	r2, #1
 8006270:	7812      	ldrb	r2, [r2, #0]
 8006272:	0212      	lsls	r2, r2, #8
 8006274:	4313      	orrs	r3, r2
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	7812      	ldrb	r2, [r2, #0]
 800627a:	4313      	orrs	r3, r2
 800627c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <f_getfree+0x152>
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	3301      	adds	r3, #1
 8006288:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	3304      	adds	r3, #4
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	3b04      	subs	r3, #4
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	3b01      	subs	r3, #1
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1ac      	bne.n	80061fc <f_getfree+0xc4>
 80062a2:	e000      	b.n	80062a6 <f_getfree+0x16e>
						if (res != FR_OK) break;
 80062a4:	bf00      	nop
			}
			fs->free_clust = n;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c4:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80062c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3738      	adds	r7, #56	; 0x38
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b088      	sub	sp, #32
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
	int n = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80062e6:	e01b      	b.n	8006320 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80062e8:	f107 0310 	add.w	r3, r7, #16
 80062ec:	f107 0114 	add.w	r1, r7, #20
 80062f0:	2201      	movs	r2, #1
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff fbd2 	bl	8005a9c <f_read>
		if (rc != 1) break;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d116      	bne.n	800632c <f_gets+0x5a>
		c = s[0];
 80062fe:	7d3b      	ldrb	r3, [r7, #20]
 8006300:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b0d      	cmp	r3, #13
 8006306:	d100      	bne.n	800630a <f_gets+0x38>
 8006308:	e00a      	b.n	8006320 <f_gets+0x4e>
		*p++ = c;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	61ba      	str	r2, [r7, #24]
 8006310:	7dfa      	ldrb	r2, [r7, #23]
 8006312:	701a      	strb	r2, [r3, #0]
		n++;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	3301      	adds	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b0a      	cmp	r3, #10
 800631e:	d007      	beq.n	8006330 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	3b01      	subs	r3, #1
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	429a      	cmp	r2, r3
 8006328:	dbde      	blt.n	80062e8 <f_gets+0x16>
 800632a:	e002      	b.n	8006332 <f_gets+0x60>
		if (rc != 1) break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006330:	bf00      	nop
	}
	*p = 0;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <f_gets+0x70>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	e000      	b.n	8006344 <f_gets+0x72>
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3720      	adds	r7, #32
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	2b0a      	cmp	r3, #10
 800635c:	d103      	bne.n	8006366 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800635e:	210d      	movs	r1, #13
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff fff3 	bl	800634c <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	db25      	blt.n	80063be <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	60fa      	str	r2, [r7, #12]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	4413      	add	r3, r2
 800637c:	78fa      	ldrb	r2, [r7, #3]
 800637e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b3c      	cmp	r3, #60	; 0x3c
 8006384:	dd12      	ble.n	80063ac <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f103 010c 	add.w	r1, r3, #12
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	f107 0308 	add.w	r3, r7, #8
 8006396:	f7ff fca4 	bl	8005ce2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d101      	bne.n	80063a6 <putc_bfd+0x5a>
 80063a2:	2300      	movs	r3, #0
 80063a4:	e001      	b.n	80063aa <putc_bfd+0x5e>
 80063a6:	f04f 33ff 	mov.w	r3, #4294967295
 80063aa:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	e000      	b.n	80063c0 <putc_bfd+0x74>
	if (i < 0) return;
 80063be:	bf00      	nop
}
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80063c6:	b590      	push	{r4, r7, lr}
 80063c8:	b097      	sub	sp, #92	; 0x5c
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80063dc:	e009      	b.n	80063f2 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	781a      	ldrb	r2, [r3, #0]
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff ffad 	bl	800634c <putc_bfd>
	while (*str)			/* Put the string */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f1      	bne.n	80063de <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	db15      	blt.n	800642c <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	461c      	mov	r4, r3
 8006406:	f107 0208 	add.w	r2, r7, #8
 800640a:	f107 030c 	add.w	r3, r7, #12
 800640e:	f103 010c 	add.w	r1, r3, #12
 8006412:	4613      	mov	r3, r2
 8006414:	4622      	mov	r2, r4
 8006416:	f7ff fc64 	bl	8005ce2 <f_write>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	4293      	cmp	r3, r2
 8006426:	d101      	bne.n	800642c <f_puts+0x66>
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	e001      	b.n	8006430 <f_puts+0x6a>
	return EOF;
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006430:	4618      	mov	r0, r3
 8006432:	375c      	adds	r7, #92	; 0x5c
 8006434:	46bd      	mov	sp, r7
 8006436:	bd90      	pop	{r4, r7, pc}

08006438 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800644e:	4b1e      	ldr	r3, [pc, #120]	; (80064c8 <FATFS_LinkDriverEx+0x90>)
 8006450:	7a5b      	ldrb	r3, [r3, #9]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	d831      	bhi.n	80064bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006458:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <FATFS_LinkDriverEx+0x90>)
 800645a:	7a5b      	ldrb	r3, [r3, #9]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	4b19      	ldr	r3, [pc, #100]	; (80064c8 <FATFS_LinkDriverEx+0x90>)
 8006462:	2100      	movs	r1, #0
 8006464:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006466:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <FATFS_LinkDriverEx+0x90>)
 8006468:	7a5b      	ldrb	r3, [r3, #9]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4a16      	ldr	r2, [pc, #88]	; (80064c8 <FATFS_LinkDriverEx+0x90>)
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <FATFS_LinkDriverEx+0x90>)
 8006478:	7a5b      	ldrb	r3, [r3, #9]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <FATFS_LinkDriverEx+0x90>)
 8006480:	4413      	add	r3, r2
 8006482:	79fa      	ldrb	r2, [r7, #7]
 8006484:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006486:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <FATFS_LinkDriverEx+0x90>)
 8006488:	7a5b      	ldrb	r3, [r3, #9]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	b2d1      	uxtb	r1, r2
 8006490:	4a0d      	ldr	r2, [pc, #52]	; (80064c8 <FATFS_LinkDriverEx+0x90>)
 8006492:	7251      	strb	r1, [r2, #9]
 8006494:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006496:	7dbb      	ldrb	r3, [r7, #22]
 8006498:	3330      	adds	r3, #48	; 0x30
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3301      	adds	r3, #1
 80064a4:	223a      	movs	r2, #58	; 0x3a
 80064a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	3302      	adds	r3, #2
 80064ac:	222f      	movs	r2, #47	; 0x2f
 80064ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	3303      	adds	r3, #3
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr
 80064c8:	20000664 	.word	0x20000664

080064cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80064d6:	2200      	movs	r2, #0
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff ffac 	bl	8006438 <FATFS_LinkDriverEx>
 80064e0:	4603      	mov	r3, r0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	6039      	str	r1, [r7, #0]
 80064f6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	2b7f      	cmp	r3, #127	; 0x7f
 80064fc:	d802      	bhi.n	8006504 <ff_convert+0x18>
		c = chr;
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	81fb      	strh	r3, [r7, #14]
 8006502:	e025      	b.n	8006550 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800650a:	88fb      	ldrh	r3, [r7, #6]
 800650c:	2bff      	cmp	r3, #255	; 0xff
 800650e:	d805      	bhi.n	800651c <ff_convert+0x30>
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	3b80      	subs	r3, #128	; 0x80
 8006514:	4a11      	ldr	r2, [pc, #68]	; (800655c <ff_convert+0x70>)
 8006516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800651a:	e000      	b.n	800651e <ff_convert+0x32>
 800651c:	2300      	movs	r3, #0
 800651e:	81fb      	strh	r3, [r7, #14]
 8006520:	e016      	b.n	8006550 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8006522:	2300      	movs	r3, #0
 8006524:	81fb      	strh	r3, [r7, #14]
 8006526:	e009      	b.n	800653c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006528:	89fb      	ldrh	r3, [r7, #14]
 800652a:	4a0c      	ldr	r2, [pc, #48]	; (800655c <ff_convert+0x70>)
 800652c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006530:	88fa      	ldrh	r2, [r7, #6]
 8006532:	429a      	cmp	r2, r3
 8006534:	d006      	beq.n	8006544 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006536:	89fb      	ldrh	r3, [r7, #14]
 8006538:	3301      	adds	r3, #1
 800653a:	81fb      	strh	r3, [r7, #14]
 800653c:	89fb      	ldrh	r3, [r7, #14]
 800653e:	2b7f      	cmp	r3, #127	; 0x7f
 8006540:	d9f2      	bls.n	8006528 <ff_convert+0x3c>
 8006542:	e000      	b.n	8006546 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006544:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006546:	89fb      	ldrh	r3, [r7, #14]
 8006548:	3380      	adds	r3, #128	; 0x80
 800654a:	b29b      	uxth	r3, r3
 800654c:	b2db      	uxtb	r3, r3
 800654e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006550:	89fb      	ldrh	r3, [r7, #14]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	08007150 	.word	0x08007150

08006560 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	e002      	b.n	8006576 <ff_wtoupper+0x16>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3301      	adds	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	4a0f      	ldr	r2, [pc, #60]	; (80065b4 <ff_wtoupper+0x54>)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d006      	beq.n	8006590 <ff_wtoupper+0x30>
 8006582:	4a0c      	ldr	r2, [pc, #48]	; (80065b4 <ff_wtoupper+0x54>)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	429a      	cmp	r2, r3
 800658e:	d1ef      	bne.n	8006570 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8006590:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <ff_wtoupper+0x54>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <ff_wtoupper+0x46>
 800659c:	4a06      	ldr	r2, [pc, #24]	; (80065b8 <ff_wtoupper+0x58>)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a4:	e000      	b.n	80065a8 <ff_wtoupper+0x48>
 80065a6:	88fb      	ldrh	r3, [r7, #6]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	08007250 	.word	0x08007250
 80065b8:	08007430 	.word	0x08007430

080065bc <__errno>:
 80065bc:	4b01      	ldr	r3, [pc, #4]	; (80065c4 <__errno+0x8>)
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000024 	.word	0x20000024

080065c8 <__libc_init_array>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	2600      	movs	r6, #0
 80065cc:	4d0c      	ldr	r5, [pc, #48]	; (8006600 <__libc_init_array+0x38>)
 80065ce:	4c0d      	ldr	r4, [pc, #52]	; (8006604 <__libc_init_array+0x3c>)
 80065d0:	1b64      	subs	r4, r4, r5
 80065d2:	10a4      	asrs	r4, r4, #2
 80065d4:	42a6      	cmp	r6, r4
 80065d6:	d109      	bne.n	80065ec <__libc_init_array+0x24>
 80065d8:	f000 fc9c 	bl	8006f14 <_init>
 80065dc:	2600      	movs	r6, #0
 80065de:	4d0a      	ldr	r5, [pc, #40]	; (8006608 <__libc_init_array+0x40>)
 80065e0:	4c0a      	ldr	r4, [pc, #40]	; (800660c <__libc_init_array+0x44>)
 80065e2:	1b64      	subs	r4, r4, r5
 80065e4:	10a4      	asrs	r4, r4, #2
 80065e6:	42a6      	cmp	r6, r4
 80065e8:	d105      	bne.n	80065f6 <__libc_init_array+0x2e>
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f0:	4798      	blx	r3
 80065f2:	3601      	adds	r6, #1
 80065f4:	e7ee      	b.n	80065d4 <__libc_init_array+0xc>
 80065f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fa:	4798      	blx	r3
 80065fc:	3601      	adds	r6, #1
 80065fe:	e7f2      	b.n	80065e6 <__libc_init_array+0x1e>
 8006600:	08007644 	.word	0x08007644
 8006604:	08007644 	.word	0x08007644
 8006608:	08007644 	.word	0x08007644
 800660c:	08007648 	.word	0x08007648

08006610 <memset>:
 8006610:	4603      	mov	r3, r0
 8006612:	4402      	add	r2, r0
 8006614:	4293      	cmp	r3, r2
 8006616:	d100      	bne.n	800661a <memset+0xa>
 8006618:	4770      	bx	lr
 800661a:	f803 1b01 	strb.w	r1, [r3], #1
 800661e:	e7f9      	b.n	8006614 <memset+0x4>

08006620 <siprintf>:
 8006620:	b40e      	push	{r1, r2, r3}
 8006622:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006626:	b500      	push	{lr}
 8006628:	b09c      	sub	sp, #112	; 0x70
 800662a:	ab1d      	add	r3, sp, #116	; 0x74
 800662c:	9002      	str	r0, [sp, #8]
 800662e:	9006      	str	r0, [sp, #24]
 8006630:	9107      	str	r1, [sp, #28]
 8006632:	9104      	str	r1, [sp, #16]
 8006634:	4808      	ldr	r0, [pc, #32]	; (8006658 <siprintf+0x38>)
 8006636:	4909      	ldr	r1, [pc, #36]	; (800665c <siprintf+0x3c>)
 8006638:	f853 2b04 	ldr.w	r2, [r3], #4
 800663c:	9105      	str	r1, [sp, #20]
 800663e:	6800      	ldr	r0, [r0, #0]
 8006640:	a902      	add	r1, sp, #8
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	f000 f868 	bl	8006718 <_svfiprintf_r>
 8006648:	2200      	movs	r2, #0
 800664a:	9b02      	ldr	r3, [sp, #8]
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	b01c      	add	sp, #112	; 0x70
 8006650:	f85d eb04 	ldr.w	lr, [sp], #4
 8006654:	b003      	add	sp, #12
 8006656:	4770      	bx	lr
 8006658:	20000024 	.word	0x20000024
 800665c:	ffff0208 	.word	0xffff0208

08006660 <__ssputs_r>:
 8006660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	688e      	ldr	r6, [r1, #8]
 8006666:	4682      	mov	sl, r0
 8006668:	429e      	cmp	r6, r3
 800666a:	460c      	mov	r4, r1
 800666c:	4690      	mov	r8, r2
 800666e:	461f      	mov	r7, r3
 8006670:	d838      	bhi.n	80066e4 <__ssputs_r+0x84>
 8006672:	898a      	ldrh	r2, [r1, #12]
 8006674:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006678:	d032      	beq.n	80066e0 <__ssputs_r+0x80>
 800667a:	6825      	ldr	r5, [r4, #0]
 800667c:	6909      	ldr	r1, [r1, #16]
 800667e:	3301      	adds	r3, #1
 8006680:	eba5 0901 	sub.w	r9, r5, r1
 8006684:	6965      	ldr	r5, [r4, #20]
 8006686:	444b      	add	r3, r9
 8006688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800668c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006690:	106d      	asrs	r5, r5, #1
 8006692:	429d      	cmp	r5, r3
 8006694:	bf38      	it	cc
 8006696:	461d      	movcc	r5, r3
 8006698:	0553      	lsls	r3, r2, #21
 800669a:	d531      	bpl.n	8006700 <__ssputs_r+0xa0>
 800669c:	4629      	mov	r1, r5
 800669e:	f000 fb6f 	bl	8006d80 <_malloc_r>
 80066a2:	4606      	mov	r6, r0
 80066a4:	b950      	cbnz	r0, 80066bc <__ssputs_r+0x5c>
 80066a6:	230c      	movs	r3, #12
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	f8ca 3000 	str.w	r3, [sl]
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b6:	81a3      	strh	r3, [r4, #12]
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	464a      	mov	r2, r9
 80066be:	6921      	ldr	r1, [r4, #16]
 80066c0:	f000 face 	bl	8006c60 <memcpy>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	6126      	str	r6, [r4, #16]
 80066d2:	444e      	add	r6, r9
 80066d4:	6026      	str	r6, [r4, #0]
 80066d6:	463e      	mov	r6, r7
 80066d8:	6165      	str	r5, [r4, #20]
 80066da:	eba5 0509 	sub.w	r5, r5, r9
 80066de:	60a5      	str	r5, [r4, #8]
 80066e0:	42be      	cmp	r6, r7
 80066e2:	d900      	bls.n	80066e6 <__ssputs_r+0x86>
 80066e4:	463e      	mov	r6, r7
 80066e6:	4632      	mov	r2, r6
 80066e8:	4641      	mov	r1, r8
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	f000 fac6 	bl	8006c7c <memmove>
 80066f0:	68a3      	ldr	r3, [r4, #8]
 80066f2:	2000      	movs	r0, #0
 80066f4:	1b9b      	subs	r3, r3, r6
 80066f6:	60a3      	str	r3, [r4, #8]
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	4433      	add	r3, r6
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	e7db      	b.n	80066b8 <__ssputs_r+0x58>
 8006700:	462a      	mov	r2, r5
 8006702:	f000 fbb1 	bl	8006e68 <_realloc_r>
 8006706:	4606      	mov	r6, r0
 8006708:	2800      	cmp	r0, #0
 800670a:	d1e1      	bne.n	80066d0 <__ssputs_r+0x70>
 800670c:	4650      	mov	r0, sl
 800670e:	6921      	ldr	r1, [r4, #16]
 8006710:	f000 face 	bl	8006cb0 <_free_r>
 8006714:	e7c7      	b.n	80066a6 <__ssputs_r+0x46>
	...

08006718 <_svfiprintf_r>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	4698      	mov	r8, r3
 800671e:	898b      	ldrh	r3, [r1, #12]
 8006720:	4607      	mov	r7, r0
 8006722:	061b      	lsls	r3, r3, #24
 8006724:	460d      	mov	r5, r1
 8006726:	4614      	mov	r4, r2
 8006728:	b09d      	sub	sp, #116	; 0x74
 800672a:	d50e      	bpl.n	800674a <_svfiprintf_r+0x32>
 800672c:	690b      	ldr	r3, [r1, #16]
 800672e:	b963      	cbnz	r3, 800674a <_svfiprintf_r+0x32>
 8006730:	2140      	movs	r1, #64	; 0x40
 8006732:	f000 fb25 	bl	8006d80 <_malloc_r>
 8006736:	6028      	str	r0, [r5, #0]
 8006738:	6128      	str	r0, [r5, #16]
 800673a:	b920      	cbnz	r0, 8006746 <_svfiprintf_r+0x2e>
 800673c:	230c      	movs	r3, #12
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	e0d1      	b.n	80068ea <_svfiprintf_r+0x1d2>
 8006746:	2340      	movs	r3, #64	; 0x40
 8006748:	616b      	str	r3, [r5, #20]
 800674a:	2300      	movs	r3, #0
 800674c:	9309      	str	r3, [sp, #36]	; 0x24
 800674e:	2320      	movs	r3, #32
 8006750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006754:	2330      	movs	r3, #48	; 0x30
 8006756:	f04f 0901 	mov.w	r9, #1
 800675a:	f8cd 800c 	str.w	r8, [sp, #12]
 800675e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006904 <_svfiprintf_r+0x1ec>
 8006762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006766:	4623      	mov	r3, r4
 8006768:	469a      	mov	sl, r3
 800676a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800676e:	b10a      	cbz	r2, 8006774 <_svfiprintf_r+0x5c>
 8006770:	2a25      	cmp	r2, #37	; 0x25
 8006772:	d1f9      	bne.n	8006768 <_svfiprintf_r+0x50>
 8006774:	ebba 0b04 	subs.w	fp, sl, r4
 8006778:	d00b      	beq.n	8006792 <_svfiprintf_r+0x7a>
 800677a:	465b      	mov	r3, fp
 800677c:	4622      	mov	r2, r4
 800677e:	4629      	mov	r1, r5
 8006780:	4638      	mov	r0, r7
 8006782:	f7ff ff6d 	bl	8006660 <__ssputs_r>
 8006786:	3001      	adds	r0, #1
 8006788:	f000 80aa 	beq.w	80068e0 <_svfiprintf_r+0x1c8>
 800678c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800678e:	445a      	add	r2, fp
 8006790:	9209      	str	r2, [sp, #36]	; 0x24
 8006792:	f89a 3000 	ldrb.w	r3, [sl]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 80a2 	beq.w	80068e0 <_svfiprintf_r+0x1c8>
 800679c:	2300      	movs	r3, #0
 800679e:	f04f 32ff 	mov.w	r2, #4294967295
 80067a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067a6:	f10a 0a01 	add.w	sl, sl, #1
 80067aa:	9304      	str	r3, [sp, #16]
 80067ac:	9307      	str	r3, [sp, #28]
 80067ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067b2:	931a      	str	r3, [sp, #104]	; 0x68
 80067b4:	4654      	mov	r4, sl
 80067b6:	2205      	movs	r2, #5
 80067b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067bc:	4851      	ldr	r0, [pc, #324]	; (8006904 <_svfiprintf_r+0x1ec>)
 80067be:	f000 fa41 	bl	8006c44 <memchr>
 80067c2:	9a04      	ldr	r2, [sp, #16]
 80067c4:	b9d8      	cbnz	r0, 80067fe <_svfiprintf_r+0xe6>
 80067c6:	06d0      	lsls	r0, r2, #27
 80067c8:	bf44      	itt	mi
 80067ca:	2320      	movmi	r3, #32
 80067cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067d0:	0711      	lsls	r1, r2, #28
 80067d2:	bf44      	itt	mi
 80067d4:	232b      	movmi	r3, #43	; 0x2b
 80067d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067da:	f89a 3000 	ldrb.w	r3, [sl]
 80067de:	2b2a      	cmp	r3, #42	; 0x2a
 80067e0:	d015      	beq.n	800680e <_svfiprintf_r+0xf6>
 80067e2:	4654      	mov	r4, sl
 80067e4:	2000      	movs	r0, #0
 80067e6:	f04f 0c0a 	mov.w	ip, #10
 80067ea:	9a07      	ldr	r2, [sp, #28]
 80067ec:	4621      	mov	r1, r4
 80067ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067f2:	3b30      	subs	r3, #48	; 0x30
 80067f4:	2b09      	cmp	r3, #9
 80067f6:	d94e      	bls.n	8006896 <_svfiprintf_r+0x17e>
 80067f8:	b1b0      	cbz	r0, 8006828 <_svfiprintf_r+0x110>
 80067fa:	9207      	str	r2, [sp, #28]
 80067fc:	e014      	b.n	8006828 <_svfiprintf_r+0x110>
 80067fe:	eba0 0308 	sub.w	r3, r0, r8
 8006802:	fa09 f303 	lsl.w	r3, r9, r3
 8006806:	4313      	orrs	r3, r2
 8006808:	46a2      	mov	sl, r4
 800680a:	9304      	str	r3, [sp, #16]
 800680c:	e7d2      	b.n	80067b4 <_svfiprintf_r+0x9c>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	1d19      	adds	r1, r3, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	9103      	str	r1, [sp, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfbb      	ittet	lt
 800681a:	425b      	neglt	r3, r3
 800681c:	f042 0202 	orrlt.w	r2, r2, #2
 8006820:	9307      	strge	r3, [sp, #28]
 8006822:	9307      	strlt	r3, [sp, #28]
 8006824:	bfb8      	it	lt
 8006826:	9204      	strlt	r2, [sp, #16]
 8006828:	7823      	ldrb	r3, [r4, #0]
 800682a:	2b2e      	cmp	r3, #46	; 0x2e
 800682c:	d10c      	bne.n	8006848 <_svfiprintf_r+0x130>
 800682e:	7863      	ldrb	r3, [r4, #1]
 8006830:	2b2a      	cmp	r3, #42	; 0x2a
 8006832:	d135      	bne.n	80068a0 <_svfiprintf_r+0x188>
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	3402      	adds	r4, #2
 8006838:	1d1a      	adds	r2, r3, #4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	9203      	str	r2, [sp, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	bfb8      	it	lt
 8006842:	f04f 33ff 	movlt.w	r3, #4294967295
 8006846:	9305      	str	r3, [sp, #20]
 8006848:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006908 <_svfiprintf_r+0x1f0>
 800684c:	2203      	movs	r2, #3
 800684e:	4650      	mov	r0, sl
 8006850:	7821      	ldrb	r1, [r4, #0]
 8006852:	f000 f9f7 	bl	8006c44 <memchr>
 8006856:	b140      	cbz	r0, 800686a <_svfiprintf_r+0x152>
 8006858:	2340      	movs	r3, #64	; 0x40
 800685a:	eba0 000a 	sub.w	r0, r0, sl
 800685e:	fa03 f000 	lsl.w	r0, r3, r0
 8006862:	9b04      	ldr	r3, [sp, #16]
 8006864:	3401      	adds	r4, #1
 8006866:	4303      	orrs	r3, r0
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686e:	2206      	movs	r2, #6
 8006870:	4826      	ldr	r0, [pc, #152]	; (800690c <_svfiprintf_r+0x1f4>)
 8006872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006876:	f000 f9e5 	bl	8006c44 <memchr>
 800687a:	2800      	cmp	r0, #0
 800687c:	d038      	beq.n	80068f0 <_svfiprintf_r+0x1d8>
 800687e:	4b24      	ldr	r3, [pc, #144]	; (8006910 <_svfiprintf_r+0x1f8>)
 8006880:	bb1b      	cbnz	r3, 80068ca <_svfiprintf_r+0x1b2>
 8006882:	9b03      	ldr	r3, [sp, #12]
 8006884:	3307      	adds	r3, #7
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	3308      	adds	r3, #8
 800688c:	9303      	str	r3, [sp, #12]
 800688e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006890:	4433      	add	r3, r6
 8006892:	9309      	str	r3, [sp, #36]	; 0x24
 8006894:	e767      	b.n	8006766 <_svfiprintf_r+0x4e>
 8006896:	460c      	mov	r4, r1
 8006898:	2001      	movs	r0, #1
 800689a:	fb0c 3202 	mla	r2, ip, r2, r3
 800689e:	e7a5      	b.n	80067ec <_svfiprintf_r+0xd4>
 80068a0:	2300      	movs	r3, #0
 80068a2:	f04f 0c0a 	mov.w	ip, #10
 80068a6:	4619      	mov	r1, r3
 80068a8:	3401      	adds	r4, #1
 80068aa:	9305      	str	r3, [sp, #20]
 80068ac:	4620      	mov	r0, r4
 80068ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b2:	3a30      	subs	r2, #48	; 0x30
 80068b4:	2a09      	cmp	r2, #9
 80068b6:	d903      	bls.n	80068c0 <_svfiprintf_r+0x1a8>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0c5      	beq.n	8006848 <_svfiprintf_r+0x130>
 80068bc:	9105      	str	r1, [sp, #20]
 80068be:	e7c3      	b.n	8006848 <_svfiprintf_r+0x130>
 80068c0:	4604      	mov	r4, r0
 80068c2:	2301      	movs	r3, #1
 80068c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068c8:	e7f0      	b.n	80068ac <_svfiprintf_r+0x194>
 80068ca:	ab03      	add	r3, sp, #12
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	462a      	mov	r2, r5
 80068d0:	4638      	mov	r0, r7
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <_svfiprintf_r+0x1fc>)
 80068d4:	a904      	add	r1, sp, #16
 80068d6:	f3af 8000 	nop.w
 80068da:	1c42      	adds	r2, r0, #1
 80068dc:	4606      	mov	r6, r0
 80068de:	d1d6      	bne.n	800688e <_svfiprintf_r+0x176>
 80068e0:	89ab      	ldrh	r3, [r5, #12]
 80068e2:	065b      	lsls	r3, r3, #25
 80068e4:	f53f af2c 	bmi.w	8006740 <_svfiprintf_r+0x28>
 80068e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ea:	b01d      	add	sp, #116	; 0x74
 80068ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f0:	ab03      	add	r3, sp, #12
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	462a      	mov	r2, r5
 80068f6:	4638      	mov	r0, r7
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <_svfiprintf_r+0x1fc>)
 80068fa:	a904      	add	r1, sp, #16
 80068fc:	f000 f87c 	bl	80069f8 <_printf_i>
 8006900:	e7eb      	b.n	80068da <_svfiprintf_r+0x1c2>
 8006902:	bf00      	nop
 8006904:	08007610 	.word	0x08007610
 8006908:	08007616 	.word	0x08007616
 800690c:	0800761a 	.word	0x0800761a
 8006910:	00000000 	.word	0x00000000
 8006914:	08006661 	.word	0x08006661

08006918 <_printf_common>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	4616      	mov	r6, r2
 800691e:	4699      	mov	r9, r3
 8006920:	688a      	ldr	r2, [r1, #8]
 8006922:	690b      	ldr	r3, [r1, #16]
 8006924:	4607      	mov	r7, r0
 8006926:	4293      	cmp	r3, r2
 8006928:	bfb8      	it	lt
 800692a:	4613      	movlt	r3, r2
 800692c:	6033      	str	r3, [r6, #0]
 800692e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006932:	460c      	mov	r4, r1
 8006934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006938:	b10a      	cbz	r2, 800693e <_printf_common+0x26>
 800693a:	3301      	adds	r3, #1
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	0699      	lsls	r1, r3, #26
 8006942:	bf42      	ittt	mi
 8006944:	6833      	ldrmi	r3, [r6, #0]
 8006946:	3302      	addmi	r3, #2
 8006948:	6033      	strmi	r3, [r6, #0]
 800694a:	6825      	ldr	r5, [r4, #0]
 800694c:	f015 0506 	ands.w	r5, r5, #6
 8006950:	d106      	bne.n	8006960 <_printf_common+0x48>
 8006952:	f104 0a19 	add.w	sl, r4, #25
 8006956:	68e3      	ldr	r3, [r4, #12]
 8006958:	6832      	ldr	r2, [r6, #0]
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	42ab      	cmp	r3, r5
 800695e:	dc28      	bgt.n	80069b2 <_printf_common+0x9a>
 8006960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006964:	1e13      	subs	r3, r2, #0
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	bf18      	it	ne
 800696a:	2301      	movne	r3, #1
 800696c:	0692      	lsls	r2, r2, #26
 800696e:	d42d      	bmi.n	80069cc <_printf_common+0xb4>
 8006970:	4649      	mov	r1, r9
 8006972:	4638      	mov	r0, r7
 8006974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006978:	47c0      	blx	r8
 800697a:	3001      	adds	r0, #1
 800697c:	d020      	beq.n	80069c0 <_printf_common+0xa8>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	68e5      	ldr	r5, [r4, #12]
 8006982:	f003 0306 	and.w	r3, r3, #6
 8006986:	2b04      	cmp	r3, #4
 8006988:	bf18      	it	ne
 800698a:	2500      	movne	r5, #0
 800698c:	6832      	ldr	r2, [r6, #0]
 800698e:	f04f 0600 	mov.w	r6, #0
 8006992:	68a3      	ldr	r3, [r4, #8]
 8006994:	bf08      	it	eq
 8006996:	1aad      	subeq	r5, r5, r2
 8006998:	6922      	ldr	r2, [r4, #16]
 800699a:	bf08      	it	eq
 800699c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069a0:	4293      	cmp	r3, r2
 80069a2:	bfc4      	itt	gt
 80069a4:	1a9b      	subgt	r3, r3, r2
 80069a6:	18ed      	addgt	r5, r5, r3
 80069a8:	341a      	adds	r4, #26
 80069aa:	42b5      	cmp	r5, r6
 80069ac:	d11a      	bne.n	80069e4 <_printf_common+0xcc>
 80069ae:	2000      	movs	r0, #0
 80069b0:	e008      	b.n	80069c4 <_printf_common+0xac>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4652      	mov	r2, sl
 80069b6:	4649      	mov	r1, r9
 80069b8:	4638      	mov	r0, r7
 80069ba:	47c0      	blx	r8
 80069bc:	3001      	adds	r0, #1
 80069be:	d103      	bne.n	80069c8 <_printf_common+0xb0>
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c8:	3501      	adds	r5, #1
 80069ca:	e7c4      	b.n	8006956 <_printf_common+0x3e>
 80069cc:	2030      	movs	r0, #48	; 0x30
 80069ce:	18e1      	adds	r1, r4, r3
 80069d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069da:	4422      	add	r2, r4
 80069dc:	3302      	adds	r3, #2
 80069de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069e2:	e7c5      	b.n	8006970 <_printf_common+0x58>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4622      	mov	r2, r4
 80069e8:	4649      	mov	r1, r9
 80069ea:	4638      	mov	r0, r7
 80069ec:	47c0      	blx	r8
 80069ee:	3001      	adds	r0, #1
 80069f0:	d0e6      	beq.n	80069c0 <_printf_common+0xa8>
 80069f2:	3601      	adds	r6, #1
 80069f4:	e7d9      	b.n	80069aa <_printf_common+0x92>
	...

080069f8 <_printf_i>:
 80069f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	7e0f      	ldrb	r7, [r1, #24]
 80069fe:	4691      	mov	r9, r2
 8006a00:	2f78      	cmp	r7, #120	; 0x78
 8006a02:	4680      	mov	r8, r0
 8006a04:	460c      	mov	r4, r1
 8006a06:	469a      	mov	sl, r3
 8006a08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a0e:	d807      	bhi.n	8006a20 <_printf_i+0x28>
 8006a10:	2f62      	cmp	r7, #98	; 0x62
 8006a12:	d80a      	bhi.n	8006a2a <_printf_i+0x32>
 8006a14:	2f00      	cmp	r7, #0
 8006a16:	f000 80d9 	beq.w	8006bcc <_printf_i+0x1d4>
 8006a1a:	2f58      	cmp	r7, #88	; 0x58
 8006a1c:	f000 80a4 	beq.w	8006b68 <_printf_i+0x170>
 8006a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a28:	e03a      	b.n	8006aa0 <_printf_i+0xa8>
 8006a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a2e:	2b15      	cmp	r3, #21
 8006a30:	d8f6      	bhi.n	8006a20 <_printf_i+0x28>
 8006a32:	a101      	add	r1, pc, #4	; (adr r1, 8006a38 <_printf_i+0x40>)
 8006a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a38:	08006a91 	.word	0x08006a91
 8006a3c:	08006aa5 	.word	0x08006aa5
 8006a40:	08006a21 	.word	0x08006a21
 8006a44:	08006a21 	.word	0x08006a21
 8006a48:	08006a21 	.word	0x08006a21
 8006a4c:	08006a21 	.word	0x08006a21
 8006a50:	08006aa5 	.word	0x08006aa5
 8006a54:	08006a21 	.word	0x08006a21
 8006a58:	08006a21 	.word	0x08006a21
 8006a5c:	08006a21 	.word	0x08006a21
 8006a60:	08006a21 	.word	0x08006a21
 8006a64:	08006bb3 	.word	0x08006bb3
 8006a68:	08006ad5 	.word	0x08006ad5
 8006a6c:	08006b95 	.word	0x08006b95
 8006a70:	08006a21 	.word	0x08006a21
 8006a74:	08006a21 	.word	0x08006a21
 8006a78:	08006bd5 	.word	0x08006bd5
 8006a7c:	08006a21 	.word	0x08006a21
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006a21 	.word	0x08006a21
 8006a88:	08006a21 	.word	0x08006a21
 8006a8c:	08006b9d 	.word	0x08006b9d
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	1d1a      	adds	r2, r3, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	602a      	str	r2, [r5, #0]
 8006a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e0a4      	b.n	8006bee <_printf_i+0x1f6>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	6829      	ldr	r1, [r5, #0]
 8006aa8:	0606      	lsls	r6, r0, #24
 8006aaa:	f101 0304 	add.w	r3, r1, #4
 8006aae:	d50a      	bpl.n	8006ac6 <_printf_i+0xce>
 8006ab0:	680e      	ldr	r6, [r1, #0]
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	2e00      	cmp	r6, #0
 8006ab6:	da03      	bge.n	8006ac0 <_printf_i+0xc8>
 8006ab8:	232d      	movs	r3, #45	; 0x2d
 8006aba:	4276      	negs	r6, r6
 8006abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac0:	230a      	movs	r3, #10
 8006ac2:	485e      	ldr	r0, [pc, #376]	; (8006c3c <_printf_i+0x244>)
 8006ac4:	e019      	b.n	8006afa <_printf_i+0x102>
 8006ac6:	680e      	ldr	r6, [r1, #0]
 8006ac8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	bf18      	it	ne
 8006ad0:	b236      	sxthne	r6, r6
 8006ad2:	e7ef      	b.n	8006ab4 <_printf_i+0xbc>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	6820      	ldr	r0, [r4, #0]
 8006ad8:	1d19      	adds	r1, r3, #4
 8006ada:	6029      	str	r1, [r5, #0]
 8006adc:	0601      	lsls	r1, r0, #24
 8006ade:	d501      	bpl.n	8006ae4 <_printf_i+0xec>
 8006ae0:	681e      	ldr	r6, [r3, #0]
 8006ae2:	e002      	b.n	8006aea <_printf_i+0xf2>
 8006ae4:	0646      	lsls	r6, r0, #25
 8006ae6:	d5fb      	bpl.n	8006ae0 <_printf_i+0xe8>
 8006ae8:	881e      	ldrh	r6, [r3, #0]
 8006aea:	2f6f      	cmp	r7, #111	; 0x6f
 8006aec:	bf0c      	ite	eq
 8006aee:	2308      	moveq	r3, #8
 8006af0:	230a      	movne	r3, #10
 8006af2:	4852      	ldr	r0, [pc, #328]	; (8006c3c <_printf_i+0x244>)
 8006af4:	2100      	movs	r1, #0
 8006af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006afa:	6865      	ldr	r5, [r4, #4]
 8006afc:	2d00      	cmp	r5, #0
 8006afe:	bfa8      	it	ge
 8006b00:	6821      	ldrge	r1, [r4, #0]
 8006b02:	60a5      	str	r5, [r4, #8]
 8006b04:	bfa4      	itt	ge
 8006b06:	f021 0104 	bicge.w	r1, r1, #4
 8006b0a:	6021      	strge	r1, [r4, #0]
 8006b0c:	b90e      	cbnz	r6, 8006b12 <_printf_i+0x11a>
 8006b0e:	2d00      	cmp	r5, #0
 8006b10:	d04d      	beq.n	8006bae <_printf_i+0x1b6>
 8006b12:	4615      	mov	r5, r2
 8006b14:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b18:	fb03 6711 	mls	r7, r3, r1, r6
 8006b1c:	5dc7      	ldrb	r7, [r0, r7]
 8006b1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b22:	4637      	mov	r7, r6
 8006b24:	42bb      	cmp	r3, r7
 8006b26:	460e      	mov	r6, r1
 8006b28:	d9f4      	bls.n	8006b14 <_printf_i+0x11c>
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d10b      	bne.n	8006b46 <_printf_i+0x14e>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	07de      	lsls	r6, r3, #31
 8006b32:	d508      	bpl.n	8006b46 <_printf_i+0x14e>
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	6861      	ldr	r1, [r4, #4]
 8006b38:	4299      	cmp	r1, r3
 8006b3a:	bfde      	ittt	le
 8006b3c:	2330      	movle	r3, #48	; 0x30
 8006b3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b46:	1b52      	subs	r2, r2, r5
 8006b48:	6122      	str	r2, [r4, #16]
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4640      	mov	r0, r8
 8006b50:	f8cd a000 	str.w	sl, [sp]
 8006b54:	aa03      	add	r2, sp, #12
 8006b56:	f7ff fedf 	bl	8006918 <_printf_common>
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d14c      	bne.n	8006bf8 <_printf_i+0x200>
 8006b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b62:	b004      	add	sp, #16
 8006b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b68:	4834      	ldr	r0, [pc, #208]	; (8006c3c <_printf_i+0x244>)
 8006b6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b6e:	6829      	ldr	r1, [r5, #0]
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b76:	6029      	str	r1, [r5, #0]
 8006b78:	061d      	lsls	r5, r3, #24
 8006b7a:	d514      	bpl.n	8006ba6 <_printf_i+0x1ae>
 8006b7c:	07df      	lsls	r7, r3, #31
 8006b7e:	bf44      	itt	mi
 8006b80:	f043 0320 	orrmi.w	r3, r3, #32
 8006b84:	6023      	strmi	r3, [r4, #0]
 8006b86:	b91e      	cbnz	r6, 8006b90 <_printf_i+0x198>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	f023 0320 	bic.w	r3, r3, #32
 8006b8e:	6023      	str	r3, [r4, #0]
 8006b90:	2310      	movs	r3, #16
 8006b92:	e7af      	b.n	8006af4 <_printf_i+0xfc>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	f043 0320 	orr.w	r3, r3, #32
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	2378      	movs	r3, #120	; 0x78
 8006b9e:	4828      	ldr	r0, [pc, #160]	; (8006c40 <_printf_i+0x248>)
 8006ba0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ba4:	e7e3      	b.n	8006b6e <_printf_i+0x176>
 8006ba6:	0659      	lsls	r1, r3, #25
 8006ba8:	bf48      	it	mi
 8006baa:	b2b6      	uxthmi	r6, r6
 8006bac:	e7e6      	b.n	8006b7c <_printf_i+0x184>
 8006bae:	4615      	mov	r5, r2
 8006bb0:	e7bb      	b.n	8006b2a <_printf_i+0x132>
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	6826      	ldr	r6, [r4, #0]
 8006bb6:	1d18      	adds	r0, r3, #4
 8006bb8:	6961      	ldr	r1, [r4, #20]
 8006bba:	6028      	str	r0, [r5, #0]
 8006bbc:	0635      	lsls	r5, r6, #24
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	d501      	bpl.n	8006bc6 <_printf_i+0x1ce>
 8006bc2:	6019      	str	r1, [r3, #0]
 8006bc4:	e002      	b.n	8006bcc <_printf_i+0x1d4>
 8006bc6:	0670      	lsls	r0, r6, #25
 8006bc8:	d5fb      	bpl.n	8006bc2 <_printf_i+0x1ca>
 8006bca:	8019      	strh	r1, [r3, #0]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4615      	mov	r5, r2
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	e7ba      	b.n	8006b4a <_printf_i+0x152>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	1d1a      	adds	r2, r3, #4
 8006bda:	602a      	str	r2, [r5, #0]
 8006bdc:	681d      	ldr	r5, [r3, #0]
 8006bde:	6862      	ldr	r2, [r4, #4]
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 f82f 	bl	8006c44 <memchr>
 8006be6:	b108      	cbz	r0, 8006bec <_printf_i+0x1f4>
 8006be8:	1b40      	subs	r0, r0, r5
 8006bea:	6060      	str	r0, [r4, #4]
 8006bec:	6863      	ldr	r3, [r4, #4]
 8006bee:	6123      	str	r3, [r4, #16]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf6:	e7a8      	b.n	8006b4a <_printf_i+0x152>
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	47d0      	blx	sl
 8006c02:	3001      	adds	r0, #1
 8006c04:	d0ab      	beq.n	8006b5e <_printf_i+0x166>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	079b      	lsls	r3, r3, #30
 8006c0a:	d413      	bmi.n	8006c34 <_printf_i+0x23c>
 8006c0c:	68e0      	ldr	r0, [r4, #12]
 8006c0e:	9b03      	ldr	r3, [sp, #12]
 8006c10:	4298      	cmp	r0, r3
 8006c12:	bfb8      	it	lt
 8006c14:	4618      	movlt	r0, r3
 8006c16:	e7a4      	b.n	8006b62 <_printf_i+0x16a>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	4632      	mov	r2, r6
 8006c1c:	4649      	mov	r1, r9
 8006c1e:	4640      	mov	r0, r8
 8006c20:	47d0      	blx	sl
 8006c22:	3001      	adds	r0, #1
 8006c24:	d09b      	beq.n	8006b5e <_printf_i+0x166>
 8006c26:	3501      	adds	r5, #1
 8006c28:	68e3      	ldr	r3, [r4, #12]
 8006c2a:	9903      	ldr	r1, [sp, #12]
 8006c2c:	1a5b      	subs	r3, r3, r1
 8006c2e:	42ab      	cmp	r3, r5
 8006c30:	dcf2      	bgt.n	8006c18 <_printf_i+0x220>
 8006c32:	e7eb      	b.n	8006c0c <_printf_i+0x214>
 8006c34:	2500      	movs	r5, #0
 8006c36:	f104 0619 	add.w	r6, r4, #25
 8006c3a:	e7f5      	b.n	8006c28 <_printf_i+0x230>
 8006c3c:	08007621 	.word	0x08007621
 8006c40:	08007632 	.word	0x08007632

08006c44 <memchr>:
 8006c44:	4603      	mov	r3, r0
 8006c46:	b510      	push	{r4, lr}
 8006c48:	b2c9      	uxtb	r1, r1
 8006c4a:	4402      	add	r2, r0
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	d101      	bne.n	8006c56 <memchr+0x12>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e003      	b.n	8006c5e <memchr+0x1a>
 8006c56:	7804      	ldrb	r4, [r0, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	428c      	cmp	r4, r1
 8006c5c:	d1f6      	bne.n	8006c4c <memchr+0x8>
 8006c5e:	bd10      	pop	{r4, pc}

08006c60 <memcpy>:
 8006c60:	440a      	add	r2, r1
 8006c62:	4291      	cmp	r1, r2
 8006c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c68:	d100      	bne.n	8006c6c <memcpy+0xc>
 8006c6a:	4770      	bx	lr
 8006c6c:	b510      	push	{r4, lr}
 8006c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c72:	4291      	cmp	r1, r2
 8006c74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c78:	d1f9      	bne.n	8006c6e <memcpy+0xe>
 8006c7a:	bd10      	pop	{r4, pc}

08006c7c <memmove>:
 8006c7c:	4288      	cmp	r0, r1
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	eb01 0402 	add.w	r4, r1, r2
 8006c84:	d902      	bls.n	8006c8c <memmove+0x10>
 8006c86:	4284      	cmp	r4, r0
 8006c88:	4623      	mov	r3, r4
 8006c8a:	d807      	bhi.n	8006c9c <memmove+0x20>
 8006c8c:	1e43      	subs	r3, r0, #1
 8006c8e:	42a1      	cmp	r1, r4
 8006c90:	d008      	beq.n	8006ca4 <memmove+0x28>
 8006c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c9a:	e7f8      	b.n	8006c8e <memmove+0x12>
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	4402      	add	r2, r0
 8006ca0:	428a      	cmp	r2, r1
 8006ca2:	d100      	bne.n	8006ca6 <memmove+0x2a>
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cae:	e7f7      	b.n	8006ca0 <memmove+0x24>

08006cb0 <_free_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	d040      	beq.n	8006d3a <_free_r+0x8a>
 8006cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cbc:	1f0c      	subs	r4, r1, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bfb8      	it	lt
 8006cc2:	18e4      	addlt	r4, r4, r3
 8006cc4:	f000 f910 	bl	8006ee8 <__malloc_lock>
 8006cc8:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <_free_r+0x8c>)
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	b933      	cbnz	r3, 8006cdc <_free_r+0x2c>
 8006cce:	6063      	str	r3, [r4, #4]
 8006cd0:	6014      	str	r4, [r2, #0]
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cd8:	f000 b90c 	b.w	8006ef4 <__malloc_unlock>
 8006cdc:	42a3      	cmp	r3, r4
 8006cde:	d908      	bls.n	8006cf2 <_free_r+0x42>
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	1821      	adds	r1, r4, r0
 8006ce4:	428b      	cmp	r3, r1
 8006ce6:	bf01      	itttt	eq
 8006ce8:	6819      	ldreq	r1, [r3, #0]
 8006cea:	685b      	ldreq	r3, [r3, #4]
 8006cec:	1809      	addeq	r1, r1, r0
 8006cee:	6021      	streq	r1, [r4, #0]
 8006cf0:	e7ed      	b.n	8006cce <_free_r+0x1e>
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	b10b      	cbz	r3, 8006cfc <_free_r+0x4c>
 8006cf8:	42a3      	cmp	r3, r4
 8006cfa:	d9fa      	bls.n	8006cf2 <_free_r+0x42>
 8006cfc:	6811      	ldr	r1, [r2, #0]
 8006cfe:	1850      	adds	r0, r2, r1
 8006d00:	42a0      	cmp	r0, r4
 8006d02:	d10b      	bne.n	8006d1c <_free_r+0x6c>
 8006d04:	6820      	ldr	r0, [r4, #0]
 8006d06:	4401      	add	r1, r0
 8006d08:	1850      	adds	r0, r2, r1
 8006d0a:	4283      	cmp	r3, r0
 8006d0c:	6011      	str	r1, [r2, #0]
 8006d0e:	d1e0      	bne.n	8006cd2 <_free_r+0x22>
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4401      	add	r1, r0
 8006d16:	6011      	str	r1, [r2, #0]
 8006d18:	6053      	str	r3, [r2, #4]
 8006d1a:	e7da      	b.n	8006cd2 <_free_r+0x22>
 8006d1c:	d902      	bls.n	8006d24 <_free_r+0x74>
 8006d1e:	230c      	movs	r3, #12
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	e7d6      	b.n	8006cd2 <_free_r+0x22>
 8006d24:	6820      	ldr	r0, [r4, #0]
 8006d26:	1821      	adds	r1, r4, r0
 8006d28:	428b      	cmp	r3, r1
 8006d2a:	bf01      	itttt	eq
 8006d2c:	6819      	ldreq	r1, [r3, #0]
 8006d2e:	685b      	ldreq	r3, [r3, #4]
 8006d30:	1809      	addeq	r1, r1, r0
 8006d32:	6021      	streq	r1, [r4, #0]
 8006d34:	6063      	str	r3, [r4, #4]
 8006d36:	6054      	str	r4, [r2, #4]
 8006d38:	e7cb      	b.n	8006cd2 <_free_r+0x22>
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	20000670 	.word	0x20000670

08006d40 <sbrk_aligned>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	4e0e      	ldr	r6, [pc, #56]	; (8006d7c <sbrk_aligned+0x3c>)
 8006d44:	460c      	mov	r4, r1
 8006d46:	6831      	ldr	r1, [r6, #0]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	b911      	cbnz	r1, 8006d52 <sbrk_aligned+0x12>
 8006d4c:	f000 f8bc 	bl	8006ec8 <_sbrk_r>
 8006d50:	6030      	str	r0, [r6, #0]
 8006d52:	4621      	mov	r1, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 f8b7 	bl	8006ec8 <_sbrk_r>
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	d00a      	beq.n	8006d74 <sbrk_aligned+0x34>
 8006d5e:	1cc4      	adds	r4, r0, #3
 8006d60:	f024 0403 	bic.w	r4, r4, #3
 8006d64:	42a0      	cmp	r0, r4
 8006d66:	d007      	beq.n	8006d78 <sbrk_aligned+0x38>
 8006d68:	1a21      	subs	r1, r4, r0
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f000 f8ac 	bl	8006ec8 <_sbrk_r>
 8006d70:	3001      	adds	r0, #1
 8006d72:	d101      	bne.n	8006d78 <sbrk_aligned+0x38>
 8006d74:	f04f 34ff 	mov.w	r4, #4294967295
 8006d78:	4620      	mov	r0, r4
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}
 8006d7c:	20000674 	.word	0x20000674

08006d80 <_malloc_r>:
 8006d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d84:	1ccd      	adds	r5, r1, #3
 8006d86:	f025 0503 	bic.w	r5, r5, #3
 8006d8a:	3508      	adds	r5, #8
 8006d8c:	2d0c      	cmp	r5, #12
 8006d8e:	bf38      	it	cc
 8006d90:	250c      	movcc	r5, #12
 8006d92:	2d00      	cmp	r5, #0
 8006d94:	4607      	mov	r7, r0
 8006d96:	db01      	blt.n	8006d9c <_malloc_r+0x1c>
 8006d98:	42a9      	cmp	r1, r5
 8006d9a:	d905      	bls.n	8006da8 <_malloc_r+0x28>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	2600      	movs	r6, #0
 8006da0:	603b      	str	r3, [r7, #0]
 8006da2:	4630      	mov	r0, r6
 8006da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da8:	4e2e      	ldr	r6, [pc, #184]	; (8006e64 <_malloc_r+0xe4>)
 8006daa:	f000 f89d 	bl	8006ee8 <__malloc_lock>
 8006dae:	6833      	ldr	r3, [r6, #0]
 8006db0:	461c      	mov	r4, r3
 8006db2:	bb34      	cbnz	r4, 8006e02 <_malloc_r+0x82>
 8006db4:	4629      	mov	r1, r5
 8006db6:	4638      	mov	r0, r7
 8006db8:	f7ff ffc2 	bl	8006d40 <sbrk_aligned>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	d14d      	bne.n	8006e5e <_malloc_r+0xde>
 8006dc2:	6834      	ldr	r4, [r6, #0]
 8006dc4:	4626      	mov	r6, r4
 8006dc6:	2e00      	cmp	r6, #0
 8006dc8:	d140      	bne.n	8006e4c <_malloc_r+0xcc>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4638      	mov	r0, r7
 8006dd0:	eb04 0803 	add.w	r8, r4, r3
 8006dd4:	f000 f878 	bl	8006ec8 <_sbrk_r>
 8006dd8:	4580      	cmp	r8, r0
 8006dda:	d13a      	bne.n	8006e52 <_malloc_r+0xd2>
 8006ddc:	6821      	ldr	r1, [r4, #0]
 8006dde:	3503      	adds	r5, #3
 8006de0:	1a6d      	subs	r5, r5, r1
 8006de2:	f025 0503 	bic.w	r5, r5, #3
 8006de6:	3508      	adds	r5, #8
 8006de8:	2d0c      	cmp	r5, #12
 8006dea:	bf38      	it	cc
 8006dec:	250c      	movcc	r5, #12
 8006dee:	4638      	mov	r0, r7
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7ff ffa5 	bl	8006d40 <sbrk_aligned>
 8006df6:	3001      	adds	r0, #1
 8006df8:	d02b      	beq.n	8006e52 <_malloc_r+0xd2>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	442b      	add	r3, r5
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	e00e      	b.n	8006e20 <_malloc_r+0xa0>
 8006e02:	6822      	ldr	r2, [r4, #0]
 8006e04:	1b52      	subs	r2, r2, r5
 8006e06:	d41e      	bmi.n	8006e46 <_malloc_r+0xc6>
 8006e08:	2a0b      	cmp	r2, #11
 8006e0a:	d916      	bls.n	8006e3a <_malloc_r+0xba>
 8006e0c:	1961      	adds	r1, r4, r5
 8006e0e:	42a3      	cmp	r3, r4
 8006e10:	6025      	str	r5, [r4, #0]
 8006e12:	bf18      	it	ne
 8006e14:	6059      	strne	r1, [r3, #4]
 8006e16:	6863      	ldr	r3, [r4, #4]
 8006e18:	bf08      	it	eq
 8006e1a:	6031      	streq	r1, [r6, #0]
 8006e1c:	5162      	str	r2, [r4, r5]
 8006e1e:	604b      	str	r3, [r1, #4]
 8006e20:	4638      	mov	r0, r7
 8006e22:	f104 060b 	add.w	r6, r4, #11
 8006e26:	f000 f865 	bl	8006ef4 <__malloc_unlock>
 8006e2a:	f026 0607 	bic.w	r6, r6, #7
 8006e2e:	1d23      	adds	r3, r4, #4
 8006e30:	1af2      	subs	r2, r6, r3
 8006e32:	d0b6      	beq.n	8006da2 <_malloc_r+0x22>
 8006e34:	1b9b      	subs	r3, r3, r6
 8006e36:	50a3      	str	r3, [r4, r2]
 8006e38:	e7b3      	b.n	8006da2 <_malloc_r+0x22>
 8006e3a:	6862      	ldr	r2, [r4, #4]
 8006e3c:	42a3      	cmp	r3, r4
 8006e3e:	bf0c      	ite	eq
 8006e40:	6032      	streq	r2, [r6, #0]
 8006e42:	605a      	strne	r2, [r3, #4]
 8006e44:	e7ec      	b.n	8006e20 <_malloc_r+0xa0>
 8006e46:	4623      	mov	r3, r4
 8006e48:	6864      	ldr	r4, [r4, #4]
 8006e4a:	e7b2      	b.n	8006db2 <_malloc_r+0x32>
 8006e4c:	4634      	mov	r4, r6
 8006e4e:	6876      	ldr	r6, [r6, #4]
 8006e50:	e7b9      	b.n	8006dc6 <_malloc_r+0x46>
 8006e52:	230c      	movs	r3, #12
 8006e54:	4638      	mov	r0, r7
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	f000 f84c 	bl	8006ef4 <__malloc_unlock>
 8006e5c:	e7a1      	b.n	8006da2 <_malloc_r+0x22>
 8006e5e:	6025      	str	r5, [r4, #0]
 8006e60:	e7de      	b.n	8006e20 <_malloc_r+0xa0>
 8006e62:	bf00      	nop
 8006e64:	20000670 	.word	0x20000670

08006e68 <_realloc_r>:
 8006e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	4614      	mov	r4, r2
 8006e70:	460e      	mov	r6, r1
 8006e72:	b921      	cbnz	r1, 8006e7e <_realloc_r+0x16>
 8006e74:	4611      	mov	r1, r2
 8006e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7a:	f7ff bf81 	b.w	8006d80 <_malloc_r>
 8006e7e:	b92a      	cbnz	r2, 8006e8c <_realloc_r+0x24>
 8006e80:	f7ff ff16 	bl	8006cb0 <_free_r>
 8006e84:	4625      	mov	r5, r4
 8006e86:	4628      	mov	r0, r5
 8006e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e8c:	f000 f838 	bl	8006f00 <_malloc_usable_size_r>
 8006e90:	4284      	cmp	r4, r0
 8006e92:	4607      	mov	r7, r0
 8006e94:	d802      	bhi.n	8006e9c <_realloc_r+0x34>
 8006e96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e9a:	d812      	bhi.n	8006ec2 <_realloc_r+0x5a>
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	f7ff ff6e 	bl	8006d80 <_malloc_r>
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d0ed      	beq.n	8006e86 <_realloc_r+0x1e>
 8006eaa:	42bc      	cmp	r4, r7
 8006eac:	4622      	mov	r2, r4
 8006eae:	4631      	mov	r1, r6
 8006eb0:	bf28      	it	cs
 8006eb2:	463a      	movcs	r2, r7
 8006eb4:	f7ff fed4 	bl	8006c60 <memcpy>
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4640      	mov	r0, r8
 8006ebc:	f7ff fef8 	bl	8006cb0 <_free_r>
 8006ec0:	e7e1      	b.n	8006e86 <_realloc_r+0x1e>
 8006ec2:	4635      	mov	r5, r6
 8006ec4:	e7df      	b.n	8006e86 <_realloc_r+0x1e>
	...

08006ec8 <_sbrk_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	2300      	movs	r3, #0
 8006ecc:	4d05      	ldr	r5, [pc, #20]	; (8006ee4 <_sbrk_r+0x1c>)
 8006ece:	4604      	mov	r4, r0
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	602b      	str	r3, [r5, #0]
 8006ed4:	f7fa fc92 	bl	80017fc <_sbrk>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_sbrk_r+0x1a>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_sbrk_r+0x1a>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20000678 	.word	0x20000678

08006ee8 <__malloc_lock>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__malloc_lock+0x8>)
 8006eea:	f000 b811 	b.w	8006f10 <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	2000067c 	.word	0x2000067c

08006ef4 <__malloc_unlock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__malloc_unlock+0x8>)
 8006ef6:	f000 b80c 	b.w	8006f12 <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	2000067c 	.word	0x2000067c

08006f00 <_malloc_usable_size_r>:
 8006f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f04:	1f18      	subs	r0, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bfbc      	itt	lt
 8006f0a:	580b      	ldrlt	r3, [r1, r0]
 8006f0c:	18c0      	addlt	r0, r0, r3
 8006f0e:	4770      	bx	lr

08006f10 <__retarget_lock_acquire_recursive>:
 8006f10:	4770      	bx	lr

08006f12 <__retarget_lock_release_recursive>:
 8006f12:	4770      	bx	lr

08006f14 <_init>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr

08006f20 <_fini>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	bf00      	nop
 8006f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f26:	bc08      	pop	{r3}
 8006f28:	469e      	mov	lr, r3
 8006f2a:	4770      	bx	lr
